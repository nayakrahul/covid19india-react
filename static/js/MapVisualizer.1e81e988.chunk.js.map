{"version":3,"sources":["hooks/useresizeobserver.js","components/maplegend.js","components/mapvisualizer.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","MapLegend","data","mapScale","mapOption","statistic","t","useTranslation","svgRef","useRef","wrapperRef","svg","d3","getBoundingClientRect","width","height","MAP_OPTIONS","HOTSPOTS","transition","duration","D3_TRANSITION_DURATION","select","attr","selectAll","remove","text","domainMax","domain","join","d","yScale","copy","range","call","tickSize","tickPadding","tickValues","tickFormat","style","g","color","title","marginTop","marginRight","marginBottom","marginLeft","ticks","ordinalWeights","x","tickAdjust","interpolate","n","Math","min","length","rangeRound","ramp","toDataURL","interpolator","Object","assign","undefined","round","map","i","invertExtent","thresholds","quantiles","thresholdFormat","append","widthScale","reduce","a","b","xPos","w","slice","acc","enter","max","bandwidth","on","node","legend","PER_MILLION","capitalize","TOTAL","Number","isInteger","formatNumber","ZONES","className","MAP_LEGEND_HEIGHT","id","preserveAspectRatio","position","canvas","context","getContext","fillStyle","fillRect","colorInterpolator","confirmed","active","recovered","deceased","tested","getTotalStatistic","normalizer","getStatistic","MapVisualizer","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapMeta","MAP_META","code","geoData","useSWR","geoDataFile","file","revalidateOnFocus","suspense","statisticMax","useMemo","stateCodes","keys","filter","stateCode","includes","view","MAP_VIEWS","STATES","option","STATE_POPULATIONS_MIL","districts","values","districtData","statisticTotal","ZONE_COLORS","clamp","nice","topology","topojson","objects","graphObjectStates","graphObjectDistricts","projection","fitSize","path","features","mapType","MAP_TYPES","COUNTRY","f","district","properties","state","st_nm","obj","fillColor","STATE_CODES","stateData","zone","strokeColor","COLORS","onceTouchedRegion","sel","districtName","update","stopPropagation","STATE","capitalizeAll","circlesData","value","UNKNOWN_DISTRICT_KEY","sort","centroid","meshStates","meshDistricts","DISTRICTS","STATE_NAMES","each","highlighted","this","parentNode","appendChild","Fragment","viewBox","colorInterpolationFilters","type"],"mappings":"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","file":"static/js/MapVisualizer.1e81e988.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  D3_TRANSITION_DURATION,\n  MAP_LEGEND_HEIGHT,\n  MAP_OPTIONS,\n  // ZONE_COLORS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {capitalize, formatNumber} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction MapLegend({data, mapScale, mapOption, statistic}) {\n  const {t} = useTranslation();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const totalZones = useMemo(() => {\n  //   return Object.values(data).reduce(\n  //     (counts, stateData) => {\n  //       if (stateData?.districts) {\n  //         Object.values(stateData.districts).forEach((districtData) => {\n  //           if (districtData?.zone?.status)\n  //             counts[districtData.zone.status] += 1;\n  //         });\n  //       }\n  //       return counts;\n  //     },\n  //     Object.keys(ZONE_COLORS).reduce((count, zone) => {\n  //       count[zone] = 0;\n  //       return count;\n  //     }, {})\n  //   );\n  // }, [data]);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    let {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    if (!width || !height)\n      ({width, height} = wrapperRef.current.getBoundingClientRect());\n\n    // if (mapOption === MAP_OPTIONS.ZONES) {\n    //   svg.call(() =>\n    //     legend({\n    //       svg: svg,\n    //       color: mapScale,\n    //       width: width,\n    //       height: height,\n    //       tickValues: [],\n    //       marginLeft: 2,\n    //       marginRight: 20,\n    //       ordinalWeights: Object.values(totalZones),\n    //     })\n    //   );\n    // }\n    if (mapOption === MAP_OPTIONS.HOTSPOTS) {\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *:not(.axistext)').remove();\n      svg.select('.axistext').text('');\n\n      const domainMax = mapScale.domain()[1];\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      legend\n        .selectAll('circle')\n        .data([domainMax / 10, (domainMax * 2) / 5, domainMax])\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', '#ccc')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', mapScale);\n\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\n\n      svg\n        .select('.circleAxis')\n        .attr('transform', `translate(48,50)`)\n        .transition(t)\n        .call(\n          d3\n            .axisRight(yScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues([domainMax / 10, (domainMax * 2) / 5, domainMax])\n            .tickFormat(d3.format('0~s'))\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle');\n\n      svg.select('.circleAxis').call((g) => g.select('.domain').remove());\n    } else {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          title:\n            mapOption === MAP_OPTIONS.PER_MILLION\n              ? `${t(capitalize(statistic))} ${t('cases per million')}`\n              : `${t(capitalize(statistic))} ${t('cases')}`,\n          width: width,\n          height: height,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (mapOption === MAP_OPTIONS.TOTAL && !Number.isInteger(d)) return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n    }\n    svg.attr('class', mapOption === MAP_OPTIONS.ZONES ? 'zone' : '');\n  }, [t, dimensions, mapScale, mapOption, statistic]); // totalZones\n\n  return (\n    <div\n      className=\"svg-parent maplegend\"\n      style={{height: MAP_LEGEND_HEIGHT}}\n      ref={wrapperRef}\n    >\n      <svg id=\"legend\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n        <image className=\"ramp\" />\n        <g className=\"bars\"></g>\n        <g className=\"circles\"></g>\n        <g className=\"circleAxis\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  svg.selectAll('.circles > *').remove();\n  svg.selectAll('.circleAxis > *').remove();\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // d3.select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(\n        d3.quantize(d3.interpolate(marginLeft, width - marginRight), n)\n      );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))\n        ).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = d3\n          .range(n)\n          .map((i) => d3.quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = d3.format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? d3.format(tickFormat)\n        : tickFormat;\n\n    x = d3\n      .scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = d3.range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = d3\n        .scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = d3\n        .scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = d3.scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      d3\n        .axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = d3.select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","import MapLegend from './maplegend';\n\nimport {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  MAP_META,\n  MAP_TYPES,\n  MAP_OPTIONS,\n  MAP_VIEWS,\n  STATE_CODES,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n  ZONE_COLORS,\n} from '../constants';\nimport {\n  capitalizeAll,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst [width, height] = [432, 488];\n\nconst colorInterpolator = {\n  confirmed: (t) => d3.interpolateReds(t * 0.85),\n  active: (t) => d3.interpolateBlues(t * 0.85),\n  recovered: (t) => d3.interpolateGreens(t * 0.85),\n  deceased: (t) => d3.interpolateGreys(t * 0.85),\n  tested: (t) => d3.interpolatePurples(t * 0.85),\n};\n\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n  return getStatistic(data, 'total', statistic, normalizer);\n};\n\nfunction MapVisualizer({\n  currentMap,\n  data,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  statistic,\n  isCountryLoaded,\n}) {\n  const {t} = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META[currentMap.code];\n\n  const {data: geoData} = useSWR(\n    mapMeta.geoDataFile,\n    async (file) => {\n      return await d3.json(file);\n    },\n    {revalidateOnFocus: false, suspense: true}\n  );\n\n  const statisticMax = useMemo(() => {\n    const stateCodes = Object.keys(data).filter(\n      (stateCode) =>\n        stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\n    );\n    return currentMap.view === MAP_VIEWS.STATES\n      ? d3.max(stateCodes, (stateCode) =>\n          getTotalStatistic(\n            data[stateCode],\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          )\n        )\n      : d3.max(stateCodes, (stateCode) =>\n          data[stateCode]?.districts\n            ? d3.max(Object.values(data[stateCode].districts), (districtData) =>\n                getTotalStatistic(districtData, statistic)\n              )\n            : 0\n        );\n  }, [data, currentMap.option, currentMap.view, statistic]);\n\n  const statisticTotal = useMemo(() => {\n    return getTotalStatistic(\n      data[currentMap.code],\n      statistic,\n      currentMap.option === MAP_OPTIONS.PER_MILLION\n        ? STATE_POPULATIONS_MIL[currentMap.code]\n        : 1\n    );\n  }, [data, currentMap.code, currentMap.option, statistic]);\n\n  const mapScale = useMemo(() => {\n    if (currentMap.option === MAP_OPTIONS.ZONES) {\n      return d3.scaleOrdinal(\n        Object.keys(ZONE_COLORS),\n        Object.values(ZONE_COLORS)\n      );\n    } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      return d3\n        .scaleSqrt([0, Math.max(statisticMax, 1)], [0, 40])\n        .clamp(true)\n        .nice(3);\n    } else {\n      return d3\n        .scaleSequential(\n          [0, Math.max(1, statisticMax)],\n          colorInterpolator[statistic]\n        )\n        .clamp(true);\n    }\n  }, [currentMap.option, statistic, statisticMax]);\n\n  useEffect(() => {\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = d3.select(svgRef.current);\n\n    const projection = d3.geoMercator().fitSize([width, height], topology);\n    const path = d3.geoPath(projection);\n\n    let features =\n      currentMap.view === MAP_VIEWS.STATES\n        ? topojson.feature(geoData, geoData.objects[mapMeta.graphObjectStates])\n            .features\n        : mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.option === MAP_OPTIONS.HOTSPOTS\n        ? [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ]\n        : topojson.feature(\n            geoData,\n            geoData.objects[mapMeta.graphObjectDistricts]\n          ).features;\n\n    // Add id to each feature\n    features = features.map((f) => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.code}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n\n    const fillColor = (d) => {\n      const stateCode = STATE_CODES[d.properties.st_nm];\n      const district = d.properties.district;\n      const stateData = data[stateCode];\n      const districtData = stateData?.districts?.[district];\n      let n;\n      if (currentMap.option === MAP_OPTIONS.ZONES) {\n        n = districtData?.zone || 0;\n      } else {\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else\n          n = getTotalStatistic(\n            stateData,\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          );\n      }\n      const color = n === 0 ? '#ffffff00' : mapScale(n);\n      return color;\n    };\n\n    const strokeColor = (d) => {\n      return currentMap.option === MAP_OPTIONS.ZONES\n        ? '#343a40'\n        : COLORS[statistic];\n    };\n\n    /* Draw map */\n    const t = d3.transition().duration(D3_TRANSITION_DURATION);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select('.regions')\n      .selectAll('path')\n      .data(\n        currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join(\n        (enter) => {\n          const sel = enter\n            .append('path')\n            .attr('d', path)\n            .attr('stroke-width', 1.8)\n            .attr('stroke-opacity', 0)\n            .style('cursor', 'pointer')\n            .on('mouseenter', (d) => {\n              setRegionHighlighted({\n                stateCode: STATE_CODES[d.properties.st_nm],\n                districtName: d.properties.district,\n              });\n            })\n            .on('mouseleave', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n            })\n            .on('touchstart', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n              else onceTouchedRegion = d;\n            })\n            .attr('fill', fillColor)\n            .attr('stroke', strokeColor);\n          sel.append('title');\n          return sel;\n        },\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .attr('fill', fillColor)\n              .attr('stroke', strokeColor)\n          )\n      )\n      .attr('pointer-events', 'all')\n      .on('click', (d) => {\n        d3.event.stopPropagation();\n        const stateCode = STATE_CODES[d.properties.st_nm];\n        if (\n          onceTouchedRegion ||\n          mapMeta.mapType === MAP_TYPES.STATE ||\n          !data[stateCode]?.districts\n        )\n          return;\n        // Disable pointer events till the new map is rendered\n        svg.attr('pointer-events', 'none');\n        svg.select('.regions').selectAll('path').attr('pointer-events', 'none');\n        // Switch map\n        changeMap(STATE_CODES[d.properties.st_nm]);\n      });\n\n    regionSelection.select('title').text((d) => {\n      if (currentMap.option === MAP_OPTIONS.TOTAL) {\n        const state = d.properties.st_nm;\n        const stateCode = STATE_CODES[state];\n        const district = d.properties.district;\n\n        const stateData = data[stateCode];\n        const districtData = stateData?.districts?.[district];\n        let n;\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else n = getTotalStatistic(stateData, statistic);\n        return (\n          formatNumber(100 * (n / (statisticTotal || 0.001))) +\n          '% from ' +\n          capitalizeAll(district ? district : state)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n      .on('end', () =>\n        svg.attr('class', currentMap.option === MAP_OPTIONS.ZONES ? 'zone' : '')\n      );\n\n    /* ----------BUBBLE MAP----------*/\n    let circlesData = [];\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      circlesData = features\n        .map((d) => {\n          const stateCode = STATE_CODES[d.properties.st_nm];\n          const district = d.properties.district;\n\n          const stateData = data[stateCode];\n          const districtData = stateData?.districts?.[district];\n          if (district) d.value = getTotalStatistic(districtData, statistic);\n          else\n            d.value = getTotalStatistic(\n              stateData?.districts?.[UNKNOWN_DISTRICT_KEY],\n              statistic\n            );\n          return d;\n        })\n        .sort((a, b) => b.value - a.value);\n    }\n\n    svg\n      .select('.circles')\n      .selectAll('circle')\n      .data(circlesData, (d) => d.id)\n      .join((enter) =>\n        enter\n          .append('circle')\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\n          .attr('fill-opacity', 0.5)\n          .style('cursor', 'pointer')\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            setRegionHighlighted({\n              stateCode: STATE_CODES[d.properties.st_nm],\n              districtName: d.properties.district || UNKNOWN_DISTRICT_KEY,\n            });\n          })\n          .on('click', () => {\n            d3.event.stopPropagation();\n          })\n      )\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '70')\n      .attr('stroke', COLORS[statistic] + '70')\n      .attr('r', (d) => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.state-borders'\n          : '.district-borders'\n      )\n      .attr('fill', 'none')\n      .attr('stroke-width', function () {\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n          ? 0\n          : 1.5;\n      })\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append('path').attr('d', path))\n      .transition(t)\n      .attr('stroke', () => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return '#00000060';\n        } else {\n          return COLORS[statistic] + '30';\n        }\n      });\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.district-borders'\n          : '.state-borders'\n      )\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('d', path)\n          .attr('fill', 'none')\n          .attr('stroke-width', 1.5)\n      )\n      .transition(t)\n      .attr('stroke', '#343a4050');\n\n    // Reset on tapping outside map\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          stateCode: 'TT',\n          districtName: null,\n        });\n      }\n    });\n  }, [\n    geoData,\n    data,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    statisticTotal,\n  ]);\n\n  useEffect(() => {\n    const state = STATE_NAMES[regionHighlighted.stateCode];\n    const district = regionHighlighted.districtName;\n\n    const svg = d3.select(svgRef.current);\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      svg\n        .select('.circles')\n        .selectAll('circle')\n        .attr('fill-opacity', (d) => {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (!district ||\n              district === d.properties?.district ||\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n          return highlighted ? 1 : 0.5;\n        });\n    } else {\n      svg\n        .select('.regions')\n        .selectAll('path')\n        .each(function (d) {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (currentMap.view === MAP_VIEWS.STATES ||\n              district === d.properties?.district);\n          if (highlighted) this.parentNode.appendChild(this);\n          d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n        });\n    }\n  }, [\n    geoData,\n    data,\n    currentMap.option,\n    currentMap.view,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    statistic,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent\">\n        <svg\n          id=\"chart\"\n          viewBox={`0 0 ${width} ${height}`}\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={svgRef}\n        >\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n          !!getTotalStatistic(\n            data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n            statistic\n          ) && (\n            <div className=\"disclaimer\">\n              <Icon.AlertCircle />\n              {t('District-wise {{statistic}} numbers need reconciliation', {\n                statistic: t(statistic),\n              })}\n            </div>\n          )}\n      </div>\n\n      {mapScale && (\n        <MapLegend\n          data={data}\n          mapScale={mapScale}\n          mapOption={currentMap.option}\n          statistic={statistic}\n        />\n      )}\n\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default MapVisualizer;\n"],"sourceRoot":""}