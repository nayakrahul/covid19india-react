{"version":3,"sources":["components/footer.js","hooks/useresizeobserver.js","components/level.js","components/minigraph.js","components/tooltip.js","components/loaders/mapvisualizer.js","components/maplegend.js","components/mapvisualizer.js","components/mapexplorer.js","components/timeseries.js","components/timeseriesexplorer.js","../node_modules/react-feather/dist/icons/compass.js","components/deltabargraph.js","components/statedropdown.js","components/statemetacard.js","components/statemeta.js","../node_modules/react-feather/dist/icons/smile.js","components/state.js"],"names":["React","memo","props","t","useTranslation","className","style","animationDelay","href","target","rel","justifyContent","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","LevelItem","statistic","total","delta","spring","useSpring","from","config","stiff","Fragment","capitalize","h4","interpolate","formatNumber","Math","floor","size","verticalAlign","h1","data","useTrail","transform","opacity","trail","set","PRIMARY_STATISTICS","map","div","key","classnames","getStatistic","prevProps","currProps","equal","timeseries","timelineDate","date","refs","useRef","dates","useMemo","today","getIndiaYesterdayISO","pastDates","Object","keys","filter","cutOffDate","formatISO","subDays","parseIndiaDate","MINIGRAPH_LOOKBACK_DAYS","representation","T","length","margin","chartRight","chartBottom","xScale","d3","clamp","domain","range","dailyMin","dailyMax","max","domainMinMax","yScale","pathLength","svg","color","COLORS","line","curve","x","y","selectAll","join","enter","append","attr","this","getTotalLength","call","transition","delay","duration","update","attrTween","previous","interpolatePath","el","width","height","viewBox","preserveAspectRatio","FADE_IN","zIndex","position","pointerEvents","FADE_OUT","Tooltip","children","isTooltipVisible","setIsTooltipVisible","transitions","useTransition","leave","mass","tension","friction","onMouseEnter","onMouseLeave","item","MapVisualizerLoader","windowWidth","window","innerWidth","mapHeight","MAP_LEGEND_HEIGHT","speed","backgroundColor","cx","cy","r","MapLegend","mapScale","mapOption","svgRef","wrapperRef","getBoundingClientRect","MAP_OPTIONS","HOTSPOTS","D3_TRANSITION_DURATION","select","remove","text","domainMax","d","copy","tickSize","tickPadding","tickValues","tickFormat","g","title","marginTop","marginRight","marginBottom","marginLeft","ticks","ordinalWeights","tickAdjust","n","min","rangeRound","ramp","toDataURL","interpolator","assign","undefined","round","i","invertExtent","thresholds","quantiles","thresholdFormat","widthScale","reduce","a","b","xPos","w","slice","acc","bandwidth","on","node","legend","PER_MILLION","TOTAL","Number","isInteger","ZONES","id","canvas","context","getContext","fillStyle","fillRect","colorInterpolator","confirmed","active","recovered","deceased","tested","getTotalStatistic","normalizer","MapVisualizer","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapMeta","MAP_META","code","geoData","useSWR","geoDataFile","file","revalidateOnFocus","suspense","statisticMax","stateCodes","stateCode","includes","view","MAP_VIEWS","STATES","option","STATE_POPULATIONS_MIL","districts","values","districtData","statisticTotal","ZONE_COLORS","nice","topology","topojson","objects","graphObjectStates","graphObjectDistricts","projection","fitSize","path","features","f","district","properties","state","st_nm","obj","fillColor","STATE_CODES","stateData","zone","strokeColor","onceTouchedRegion","sel","districtName","stopPropagation","mapType","MAP_TYPES","STATE","capitalizeAll","circlesData","value","UNKNOWN_DISTRICT_KEY","sort","centroid","meshStates","COUNTRY","meshDistricts","DISTRICTS","STATE_NAMES","each","highlighted","parentNode","appendChild","colorInterpolationFilters","type","anchor","setAnchor","mapStatistic","setMapStatistic","history","useHistory","mapExplorerRef","setCurrentMap","currentMapMeta","currentMapData","switchMap","useCallback","newMapMeta","topDistrict","ReactDOM","unstable_batchedUpdates","panelState","produce","draft","hoveredRegion","hoveredData","name","population_millions","springs","useSprings","MAP_STATISTICS","stickied","hidden","onClick","action","focused","h6","formatDate","meta","source","push","formatLastUpdated","fallback","clientWidth","handleTabClick","TT","chartType","isUniform","isLog","highlightedDate","setHighlightedDate","numTicksX","xAxis","xAxis2","yAxis","uniformScaleMin","uniformScaleMax","yScaleUniformLinear","yScaleUniformLog","mousemove","xm","invert","bisectDate","left","mouseout","TIMESERIES_STATISTICS","generateYScale","getStatisticDelta","deltaToday","yesterday","element","TIMESERIES_OPTIONS","MONTH","timeseriesOption","setTimeseriesOption","useLocalStorage","setChartType","setIsUniform","setIsLog","explorerElement","isVisible","useIsVisible","once","TWO_WEEKS","sub","weeks","months","display","TIMESERIES_CHART_TYPES","ctype","htmlFor","checked","aria-label","onChange","disabled","selected","_extends","arguments","prototype","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Compass","forwardRef","_ref","_ref$color","_ref$size","rest","createElement","xmlns","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","propTypes","PropTypes","string","oneOfType","number","displayName","getDeltaStatistic","NUM_BARS_STATEPAGE","paddingInner","roundedBar","textSelection","val","prevVal","abs","h","sign","StateDropdown","showDropdown","setShowDropdown","dropdownRef","useClickAway","prevData","StateMetaCard","formula","description","StateMeta","totalConfirmed","indiaDate","format","getIndiaDate","prevWeekDate","prevWeekConfirmed","confirmedPerMillion","testPerMillion","totalConfirmedPerMillion","recoveryPercent","activePercent","deathPercent","growthRate","STATE_POPULATIONS","Smile","x1","y1","x2","y2","useParams","toUpperCase","useMeasure","mapSwitcher","showAllDistricts","setShowAllDistricts","useEffectOnce","anime","targets","translateX","easing","fetcher","revalidateOnMount","refreshInterval","gridRowCount","gridColumnCount","districtCount","ceil","Helmet","content","last_updated","gridTemplateRows","districtNameA","districtNameB","districtA","districtB","handleSort","every"],"mappings":"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","file":"static/js/State.22c3c81f.chunk.js","sourcesContent":["import React from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Footer(props) {\n  const {t} = useTranslation();\n\n  return (\n    <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n      <h5>{t('We stand with everyone fighting on the frontlines')}</h5>\n\n      <div className=\"link\">\n        <a\n          href=\"https://github.com/covid19india\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          covid19india\n        </a>\n      </div>\n\n      <a\n        href=\"https://github.com/covid19india/covid19india-react\"\n        className=\"button github\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.GitHub />\n        <span>{t('Open Sourced on GitHub')}</span>\n      </a>\n\n      <a\n        className=\"button excel\"\n        href=\"http://patientdb.covid19india.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.Database />\n        <span>{t('Crowdsourced Patient Database')}</span>\n      </a>\n\n      <a\n        href=\"https://twitter.com/covid19indiaorg\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"button twitter\"\n        style={{justifyContent: 'center'}}\n      >\n        <Icon.Twitter />\n        <span>{t('View updates on Twitter')}</span>\n      </a>\n\n      <a\n        href=\"https://bit.ly/covid19crowd\"\n        className=\"button telegram\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.MessageCircle />\n        <span>{t('Join Telegram to Collaborate!')}</span>\n      </a>\n    </footer>\n  );\n}\n\nexport default React.memo(Footer);\n","import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {PRIMARY_STATISTICS} from '../constants';\nimport {capitalize, formatNumber, getStatistic} from '../utils/commonfunctions';\n\nimport {HeartFillIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring, config, useTrail} from 'react-spring';\n\nfunction PureLevelItem({statistic, total, delta}) {\n  const {t} = useTranslation();\n  const spring = useSpring(\n    {\n      total: total,\n      delta: delta,\n      from: {total: total, delta: delta},\n    },\n    config.stiff\n  );\n\n  return (\n    <React.Fragment>\n      <h5>{t(capitalize(statistic))}</h5>\n      <animated.h4>\n        {statistic !== 'active' ? (\n          delta > 0 ? (\n            spring.delta.interpolate(\n              (delta) => `+${formatNumber(Math.floor(delta))}`\n            )\n          ) : (\n            <HeartFillIcon size={9} verticalAlign={2} />\n          )\n        ) : (\n          '\\u00A0'\n        )}\n      </animated.h4>\n      <animated.h1>\n        {spring.total.interpolate((total) => formatNumber(Math.floor(total)))}\n      </animated.h1>\n    </React.Fragment>\n  );\n}\n\nconst LevelItem = React.memo(PureLevelItem);\n\nfunction Level({data}) {\n  const [trail, set] = useTrail(4, () => ({\n    transform: 'translate3d(0, 20px, 0)',\n    opacity: 0,\n    config: config.stiff,\n  }));\n\n  set({transform: 'translate3d(0, 0px, 0)', opacity: 1});\n\n  return (\n    <div className=\"Level\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <animated.div\n          key={index}\n          className={classnames('level-item', `is-${statistic}`)}\n          style={trail[index]}\n        >\n          <LevelItem\n            {...{statistic}}\n            total={getStatistic(data, 'total', statistic)}\n            delta={getStatistic(data, 'delta', statistic)}\n          />\n        </animated.div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      getStatistic(prevProps.data, 'total', 'active'),\n      getStatistic(currProps.data, 'total', 'active')\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Level, isEqual);\n","import {\n  COLORS,\n  MINIGRAPH_LOOKBACK_DAYS,\n  PRIMARY_STATISTICS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport * as d3 from 'd3';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useMemo} from 'react';\n\nfunction Minigraph({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n    const cutOffDate = formatISO(\n      subDays(parseIndiaDate(today), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDate);\n  }, [timeseries, timelineDate]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const margin = {top: 10, right: 5, bottom: 20, left: 5};\n    const chartRight = 100 - margin.right;\n    const chartBottom = 100 - margin.bottom;\n\n    const xScale = d3\n      .scaleTime()\n      .clamp(true)\n      .domain([parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])])\n      .range([margin.left, chartRight]);\n\n    const dailyMin = d3.min(dates, (date) =>\n      getStatistic(timeseries[date], 'delta', 'active')\n    );\n\n    const dailyMax = d3.max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], 'delta', 'confirmed'),\n        getStatistic(timeseries[date], 'delta', 'recovered'),\n        getStatistic(timeseries[date], 'delta', 'deceased')\n      )\n    );\n\n    const domainMinMax = Math.max(-dailyMin, dailyMax);\n\n    const yScale = d3\n      .scaleLinear()\n      .clamp(true)\n      .domain([-domainMinMax, domainMinMax])\n      .range([chartBottom, margin.top]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = d3.select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = COLORS[statistic];\n\n      const line = d3\n        .line()\n        .curve(d3.curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) =>\n          yScale(getStatistic(timeseries[date], 'delta', statistic))\n        );\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', line)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = d3.select(this).attr('d');\n                const current = line(date);\n                return interpolatePath(previous, current);\n              })\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getStatistic(timeseries[date], 'delta', statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n        );\n    });\n  }, [dates, timeseries]);\n\n  return (\n    <div className=\"Minigraph\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div key={statistic} className={classnames('svg-parent')}>\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            width=\"100\"\n            height=\"75\"\n            viewBox=\"0 0 100 75\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Minigraph, isEqual);\n","import React, {useState} from 'react';\nimport {useTransition, animated} from 'react-spring';\n\nconst FADE_IN = {\n  opacity: 1,\n  transform: 'translate3d(0, 0px, 0)',\n  zIndex: 999,\n  position: 'absolute',\n  pointerEvents: 'none',\n};\n\nconst FADE_OUT = {\n  opacity: 0,\n  transform: 'translate3d(0, 2px, 0)',\n  zIndex: 999,\n  position: 'absolute',\n  pointerEvents: 'none',\n};\n\nconst Tooltip = ({data, children}) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const transitions = useTransition(isTooltipVisible, null, {\n    from: FADE_OUT,\n    enter: FADE_IN,\n    leave: FADE_OUT,\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  return (\n    <span\n      className=\"Tooltip\"\n      style={{position: 'relative'}}\n      onMouseEnter={() => {\n        setIsTooltipVisible(true);\n      }}\n      onMouseLeave={() => {\n        setIsTooltipVisible(false);\n      }}\n    >\n      {children}\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div style={props}>\n            <div key={key} className=\"message\">\n              <p>{data}</p>\n            </div>\n          </animated.div>\n        ) : (\n          <animated.div key={key}></animated.div>\n        )\n      )}\n    </span>\n  );\n};\n\nexport default Tooltip;\n","import {COLORS, MAP_LEGEND_HEIGHT} from '../../constants';\n\nimport React from 'react';\nimport ContentLoader from 'react-content-loader';\n\n// Margins as declared in CSS\nexport const MAP_BUFFER_MARGINS = 42;\nexport const INDIA_ASPECT_RATIO = 0.885;\n\nconst MapVisualizerLoader = ({width, statistic}) => {\n  const windowWidth = window.innerWidth;\n  // Default width for loader\n  if (!width) width = windowWidth > 769 ? 480 : windowWidth;\n  // From CSS\n  const scalingFactor = windowWidth > 769 ? 0.9 : 1;\n  const mapHeight = (scalingFactor * width) / INDIA_ASPECT_RATIO;\n  const height = MAP_BUFFER_MARGINS + MAP_LEGEND_HEIGHT + mapHeight;\n  return (\n    <ContentLoader\n      viewBox={`0 0 ${width} ${height}`}\n      height={height}\n      width={width}\n      speed={2}\n      backgroundColor={COLORS[statistic]}\n    >\n      <circle cx={0.4 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.5 * width} cy={height / 2} r=\"5\" />\n      <circle cx={0.6 * width} cy={height / 2} r=\"5\" />\n    </ContentLoader>\n  );\n};\n\nexport default MapVisualizerLoader;\n","import {\n  D3_TRANSITION_DURATION,\n  MAP_LEGEND_HEIGHT,\n  MAP_OPTIONS,\n  // ZONE_COLORS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {capitalize, formatNumber} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction MapLegend({data, mapScale, mapOption, statistic}) {\n  const {t} = useTranslation();\n\n  const svgRef = useRef(null);\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // const totalZones = useMemo(() => {\n  //   return Object.values(data).reduce(\n  //     (counts, stateData) => {\n  //       if (stateData?.districts) {\n  //         Object.values(stateData.districts).forEach((districtData) => {\n  //           if (districtData?.zone?.status)\n  //             counts[districtData.zone.status] += 1;\n  //         });\n  //       }\n  //       return counts;\n  //     },\n  //     Object.keys(ZONE_COLORS).reduce((count, zone) => {\n  //       count[zone] = 0;\n  //       return count;\n  //     }, {})\n  //   );\n  // }, [data]);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    let {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    if (!width || !height)\n      ({width, height} = wrapperRef.current.getBoundingClientRect());\n\n    // if (mapOption === MAP_OPTIONS.ZONES) {\n    //   svg.call(() =>\n    //     legend({\n    //       svg: svg,\n    //       color: mapScale,\n    //       width: width,\n    //       height: height,\n    //       tickValues: [],\n    //       marginLeft: 2,\n    //       marginRight: 20,\n    //       ordinalWeights: Object.values(totalZones),\n    //     })\n    //   );\n    // }\n    if (mapOption === MAP_OPTIONS.HOTSPOTS) {\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n      svg\n        .select('.ramp')\n        .transition(t)\n        .attr('opacity', 0)\n        .attr('xlink:href', null);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .transition(t)\n        .attr('opacity', 0)\n        .remove();\n      svg.selectAll('.axis > *:not(.axistext)').remove();\n      svg.select('.axistext').text('');\n\n      const domainMax = mapScale.domain()[1];\n\n      const legend = svg\n        .select('.circles')\n        .attr('transform', `translate(48,40)`)\n        .attr('text-anchor', 'middle');\n\n      legend\n        .selectAll('circle')\n        .data([domainMax / 10, (domainMax * 2) / 5, domainMax])\n        .join('circle')\n        .attr('fill', 'none')\n        .attr('stroke', '#ccc')\n        .transition(t)\n        .attr('cy', (d) => -mapScale(d))\n        .attr('r', mapScale);\n\n      const yScale = mapScale.copy().range([0, -2 * mapScale(domainMax)]);\n\n      svg\n        .select('.circleAxis')\n        .attr('transform', `translate(48,50)`)\n        .transition(t)\n        .call(\n          d3\n            .axisRight(yScale)\n            .tickSize(0)\n            .tickPadding(0)\n            .tickValues([domainMax / 10, (domainMax * 2) / 5, domainMax])\n            .tickFormat(d3.format('0~s'))\n        )\n        .selectAll('.tick text')\n        .style('text-anchor', 'middle');\n\n      svg.select('.circleAxis').call((g) => g.select('.domain').remove());\n    } else {\n      svg.call(() =>\n        legend({\n          svg: svg,\n          color: mapScale,\n          title:\n            mapOption === MAP_OPTIONS.PER_MILLION\n              ? `${t(capitalize(statistic))} ${t('cases per million')}`\n              : `${t(capitalize(statistic))} ${t('cases')}`,\n          width: width,\n          height: height,\n          ticks: 5,\n          tickFormat: function (d, i, n) {\n            if (mapOption === MAP_OPTIONS.TOTAL && !Number.isInteger(d)) return;\n            if (i === n.length - 1) return formatNumber(d) + '+';\n            return formatNumber(d);\n          },\n          marginLeft: 2,\n          marginRight: 20,\n        })\n      );\n    }\n    svg.attr('class', mapOption === MAP_OPTIONS.ZONES ? 'zone' : '');\n  }, [t, dimensions, mapScale, mapOption, statistic]); // totalZones\n\n  return (\n    <div\n      className=\"svg-parent maplegend\"\n      style={{height: MAP_LEGEND_HEIGHT}}\n      ref={wrapperRef}\n    >\n      <svg id=\"legend\" preserveAspectRatio=\"xMidYMid meet\" ref={svgRef}>\n        <image className=\"ramp\" />\n        <g className=\"bars\"></g>\n        <g className=\"circles\"></g>\n        <g className=\"circleAxis\"></g>\n        <g className=\"axis\">\n          <text className=\"axistext\" />\n        </g>\n      </svg>\n      <canvas\n        className=\"color-scale\"\n        style={{position: 'absolute', height: 0}}\n      />\n    </div>\n  );\n}\n\nexport default MapLegend;\n\nfunction legend({\n  svg,\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  svg.selectAll('.circles > *').remove();\n  svg.selectAll('.circleAxis > *').remove();\n  const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // d3.select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(\n        d3.quantize(d3.interpolate(marginLeft, width - marginRight), n)\n      );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))\n        ).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg\n      .select('.bars')\n      .selectAll('rect')\n      .transition(t)\n      .attr('opacity', 0)\n      .remove();\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = d3\n          .range(n)\n          .map((i) => d3.quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = d3.format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? d3.format(tickFormat)\n        : tickFormat;\n\n    x = d3\n      .scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = d3.range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = d3\n        .scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = d3\n        .scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = d3.scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .select('.bars')\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      d3\n        .axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = d3.select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n","import MapLegend from './maplegend';\n\nimport {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  MAP_META,\n  MAP_TYPES,\n  MAP_OPTIONS,\n  MAP_VIEWS,\n  STATE_CODES,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n  ZONE_COLORS,\n} from '../constants';\nimport {\n  capitalizeAll,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useEffect, useMemo, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport useSWR from 'swr';\nimport * as topojson from 'topojson';\n\nconst [width, height] = [432, 488];\n\nconst colorInterpolator = {\n  confirmed: (t) => d3.interpolateReds(t * 0.85),\n  active: (t) => d3.interpolateBlues(t * 0.85),\n  recovered: (t) => d3.interpolateGreens(t * 0.85),\n  deceased: (t) => d3.interpolateGreys(t * 0.85),\n  tested: (t) => d3.interpolatePurples(t * 0.85),\n};\n\nconst getTotalStatistic = (data, statistic, normalizer = 1) => {\n  return getStatistic(data, 'total', statistic, normalizer);\n};\n\nfunction MapVisualizer({\n  currentMap,\n  data,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  statistic,\n  isCountryLoaded,\n}) {\n  const {t} = useTranslation();\n  const svgRef = useRef(null);\n\n  const mapMeta = MAP_META[currentMap.code];\n\n  const {data: geoData} = useSWR(\n    mapMeta.geoDataFile,\n    async (file) => {\n      return await d3.json(file);\n    },\n    {revalidateOnFocus: false, suspense: true}\n  );\n\n  const statisticMax = useMemo(() => {\n    const stateCodes = Object.keys(data).filter(\n      (stateCode) =>\n        stateCode !== 'TT' && Object.keys(MAP_META).includes(stateCode)\n    );\n    return currentMap.view === MAP_VIEWS.STATES\n      ? d3.max(stateCodes, (stateCode) =>\n          getTotalStatistic(\n            data[stateCode],\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          )\n        )\n      : d3.max(stateCodes, (stateCode) =>\n          data[stateCode]?.districts\n            ? d3.max(Object.values(data[stateCode].districts), (districtData) =>\n                getTotalStatistic(districtData, statistic)\n              )\n            : 0\n        );\n  }, [data, currentMap.option, currentMap.view, statistic]);\n\n  const statisticTotal = useMemo(() => {\n    return getTotalStatistic(\n      data[currentMap.code],\n      statistic,\n      currentMap.option === MAP_OPTIONS.PER_MILLION\n        ? STATE_POPULATIONS_MIL[currentMap.code]\n        : 1\n    );\n  }, [data, currentMap.code, currentMap.option, statistic]);\n\n  const mapScale = useMemo(() => {\n    if (currentMap.option === MAP_OPTIONS.ZONES) {\n      return d3.scaleOrdinal(\n        Object.keys(ZONE_COLORS),\n        Object.values(ZONE_COLORS)\n      );\n    } else if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      return d3\n        .scaleSqrt([0, Math.max(statisticMax, 1)], [0, 40])\n        .clamp(true)\n        .nice(3);\n    } else {\n      return d3\n        .scaleSequential(\n          [0, Math.max(1, statisticMax)],\n          colorInterpolator[statistic]\n        )\n        .clamp(true);\n    }\n  }, [currentMap.option, statistic, statisticMax]);\n\n  useEffect(() => {\n    const topology = topojson.feature(\n      geoData,\n      geoData.objects[mapMeta.graphObjectStates || mapMeta.graphObjectDistricts]\n    );\n\n    const svg = d3.select(svgRef.current);\n\n    const projection = d3.geoMercator().fitSize([width, height], topology);\n    const path = d3.geoPath(projection);\n\n    // Add id to each feature\n    let features =\n      currentMap.option !== MAP_OPTIONS.HOTSPOTS\n        ? currentMap.view === MAP_VIEWS.STATES\n          ? topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features\n          : topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features\n        : [\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            ).features,\n            ...topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            ).features,\n          ];\n\n    features = features.map((f) => {\n      const district = f.properties.district;\n      const state = f.properties.st_nm;\n      const obj = Object.assign({}, f);\n      obj.id = `${currentMap.code}-${state}${district ? '-' + district : ''}`;\n      return obj;\n    });\n\n    const fillColor = (d) => {\n      const stateCode = STATE_CODES[d.properties.st_nm];\n      const district = d.properties.district;\n      const stateData = data[stateCode];\n      const districtData = stateData?.districts?.[district];\n      let n;\n      if (currentMap.option === MAP_OPTIONS.ZONES) {\n        n = districtData?.zone || 0;\n      } else {\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else\n          n = getTotalStatistic(\n            stateData,\n            statistic,\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? STATE_POPULATIONS_MIL[stateCode]\n              : 1\n          );\n      }\n      const color = n === 0 ? '#ffffff00' : mapScale(n);\n      return color;\n    };\n\n    const strokeColor = (d) => {\n      return currentMap.option === MAP_OPTIONS.ZONES\n        ? '#343a40'\n        : COLORS[statistic];\n    };\n\n    /* Draw map */\n    const t = d3.transition().duration(D3_TRANSITION_DURATION);\n    let onceTouchedRegion = null;\n    const regionSelection = svg\n      .select('.regions')\n      .selectAll('path')\n      .data(\n        currentMap.option !== MAP_OPTIONS.HOTSPOTS ? features : [],\n        (d) => d.id\n      )\n      .join(\n        (enter) => {\n          const sel = enter\n            .append('path')\n            .attr('d', path)\n            .attr('stroke-width', 1.8)\n            .attr('stroke-opacity', 0)\n            .style('cursor', 'pointer')\n            .on('mouseenter', (d) => {\n              setRegionHighlighted({\n                stateCode: STATE_CODES[d.properties.st_nm],\n                districtName: d.properties.district,\n              });\n            })\n            .on('mouseleave', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n            })\n            .on('touchstart', (d) => {\n              if (onceTouchedRegion === d) onceTouchedRegion = null;\n              else onceTouchedRegion = d;\n            })\n            .on('click', (d) => {\n              d3.event.stopPropagation();\n              if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE)\n                return;\n              // Disable pointer events till the new map is rendered\n              svg.attr('pointer-events', 'none');\n              svg\n                .select('.regions')\n                .selectAll('path')\n                .attr('pointer-events', 'none');\n              // Switch map\n              changeMap(STATE_CODES[d.properties.st_nm]);\n            })\n            .attr('fill', fillColor)\n            .attr('stroke', strokeColor);\n          sel.append('title');\n          return sel;\n        },\n        (update) =>\n          update.call((update) =>\n            update\n              .transition(t)\n              .attr('fill', fillColor)\n              .attr('stroke', strokeColor)\n          )\n      )\n      .attr('pointer-events', 'all');\n\n    regionSelection.select('title').text((d) => {\n      if (currentMap.option === MAP_OPTIONS.TOTAL) {\n        const state = d.properties.st_nm;\n        const stateCode = STATE_CODES[state];\n        const district = d.properties.district;\n\n        const stateData = data[stateCode];\n        const districtData = stateData?.districts?.[district];\n        let n;\n        if (district) n = getTotalStatistic(districtData, statistic);\n        else n = getTotalStatistic(stateData, statistic);\n        return (\n          formatNumber(100 * (n / (statisticTotal || 0.001))) +\n          '% from ' +\n          capitalizeAll(district ? district : state)\n        );\n      }\n    });\n\n    svg\n      .transition()\n      .duration(mapMeta.mapType === MAP_TYPES.STATE ? t.duration() / 2 : 0)\n      .on('end', () =>\n        svg.attr('class', currentMap.option === MAP_OPTIONS.ZONES ? 'zone' : '')\n      );\n\n    /* ----------BUBBLE MAP----------*/\n    let circlesData = [];\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      circlesData = features\n        .map((d) => {\n          const stateCode = STATE_CODES[d.properties.st_nm];\n          const district = d.properties.district;\n\n          const stateData = data[stateCode];\n          const districtData = stateData?.districts?.[district];\n          if (district) d.value = getTotalStatistic(districtData, statistic);\n          else\n            d.value = getTotalStatistic(\n              stateData?.districts?.[UNKNOWN_DISTRICT_KEY],\n              statistic\n            );\n          return d;\n        })\n        .sort((a, b) => b.value - a.value);\n    }\n\n    svg\n      .select('.circles')\n      .selectAll('circle')\n      .data(circlesData, (d) => d.id)\n      .join((enter) =>\n        enter\n          .append('circle')\n          .attr('transform', (d) => `translate(${path.centroid(d)})`)\n          .attr('fill-opacity', 0.5)\n          .style('cursor', 'pointer')\n          .attr('pointer-events', 'all')\n          .on('mouseenter', (d) => {\n            setRegionHighlighted({\n              stateCode: STATE_CODES[d.properties.st_nm],\n              districtName: d.properties.district || UNKNOWN_DISTRICT_KEY,\n            });\n          })\n          .on('click', () => {\n            d3.event.stopPropagation();\n          })\n      )\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '70')\n      .attr('stroke', COLORS[statistic] + '70')\n      .attr('r', (d) => mapScale(d.value));\n    /* ------------------------------*/\n\n    let meshStates = [];\n    if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n      meshStates = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n      ];\n      meshStates[0].id = mapMeta.graphObjectStates;\n    }\n    let meshDistricts = [];\n    if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n      // Add id to mesh\n      meshDistricts = [\n        topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n      ];\n      meshDistricts[0].id = mapMeta.graphObjectDistricts;\n    }\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.state-borders'\n          : '.district-borders'\n      )\n      .attr('fill', 'none')\n      .attr('stroke-width', function () {\n        return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n          ? 0\n          : 1.5;\n      })\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n        (d) => d.id\n      )\n      .join((enter) => enter.append('path').attr('d', path))\n      .transition(t)\n      .attr('stroke', () => {\n        if (currentMap.option === MAP_OPTIONS.ZONES) {\n          return '#00000060';\n        } else {\n          return COLORS[statistic] + '30';\n        }\n      });\n\n    svg\n      .select(\n        currentMap.view === MAP_VIEWS.STATES\n          ? '.district-borders'\n          : '.state-borders'\n      )\n      .selectAll('path')\n      .data(\n        currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n        (d) => d.id\n      )\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('d', path)\n          .attr('fill', 'none')\n          .attr('stroke-width', 1.5)\n      )\n      .transition(t)\n      .attr('stroke', '#343a4050');\n\n    // Reset on tapping outside map\n    svg.attr('pointer-events', 'auto').on('click', () => {\n      if (mapMeta.mapType !== MAP_TYPES.STATE) {\n        setRegionHighlighted({\n          stateCode: 'TT',\n          districtName: null,\n        });\n      }\n    });\n  }, [\n    geoData,\n    data,\n    mapMeta,\n    currentMap,\n    setRegionHighlighted,\n    changeMap,\n    isCountryLoaded,\n    mapScale,\n    statistic,\n    statisticTotal,\n  ]);\n\n  useEffect(() => {\n    const state = STATE_NAMES[regionHighlighted.stateCode];\n    const district = regionHighlighted.districtName;\n\n    const svg = d3.select(svgRef.current);\n    if (currentMap.option === MAP_OPTIONS.HOTSPOTS) {\n      svg\n        .select('.circles')\n        .selectAll('circle')\n        .attr('fill-opacity', (d) => {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (!district ||\n              district === d.properties?.district ||\n              (district === UNKNOWN_DISTRICT_KEY && !d.properties.district));\n          return highlighted ? 1 : 0.5;\n        });\n    } else {\n      svg\n        .select('.regions')\n        .selectAll('path')\n        .each(function (d) {\n          const highlighted =\n            state === d.properties.st_nm &&\n            (currentMap.view === MAP_VIEWS.STATES ||\n              district === d.properties?.district);\n          if (highlighted) this.parentNode.appendChild(this);\n          d3.select(this).attr('stroke-opacity', highlighted ? 1 : 0);\n        });\n    }\n  }, [\n    geoData,\n    data,\n    currentMap.option,\n    currentMap.view,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    statistic,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent\">\n        <svg\n          id=\"chart\"\n          viewBox={`0 0 ${width} ${height}`}\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={svgRef}\n        >\n          <g className=\"regions\" />\n          <g className=\"state-borders\" />\n          {currentMap.view === MAP_VIEWS.DISTRICTS && (\n            <g className=\"district-borders\" />\n          )}\n          {currentMap.option === MAP_OPTIONS.HOTSPOTS && (\n            <g className=\"circles\" />\n          )}\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n          !!getTotalStatistic(\n            data[currentMap.code]?.districts?.[UNKNOWN_DISTRICT_KEY],\n            statistic\n          ) && (\n            <div className=\"disclaimer\">\n              <Icon.AlertCircle />\n              {t('District-wise {{statistic}} numbers need reconciliation', {\n                statistic: t(statistic),\n              })}\n            </div>\n          )}\n      </div>\n\n      {mapScale && (\n        <MapLegend\n          data={data}\n          mapScale={mapScale}\n          mapOption={currentMap.option}\n          statistic={statistic}\n        />\n      )}\n\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549  0           0            0  0.08627451\n                      0           0.91372549  0            0  0.08627451\n                      0           0           0.854901961  0  0.145098039\n                      0           0           0            1  0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default MapVisualizer;\n","import MapVisualizerLoader from './loaders/mapvisualizer';\nimport MapVisualizer from './mapvisualizer';\n\nimport {\n  MAP_META,\n  MAP_OPTIONS,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  MAP_VIEWS,\n  STATE_NAMES,\n  STATE_POPULATIONS_MIL,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport {PinIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  Suspense,\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSprings, animated} from 'react-spring';\n\nfunction MapExplorer({\n  stateCode,\n  data,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapStatistic,\n  setMapStatistic,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const history = useHistory();\n\n  const mapExplorerRef = useRef();\n\n  const [currentMap, setCurrentMap] = useState({\n    code: stateCode,\n    view:\n      MAP_META[stateCode].mapType === MAP_TYPES.COUNTRY\n        ? MAP_VIEWS.STATES\n        : MAP_VIEWS.DISTRICTS,\n    option: MAP_OPTIONS.TOTAL,\n  });\n  const currentMapMeta = MAP_META[currentMap.code];\n\n  const currentMapData =\n    currentMapMeta.mapType === MAP_TYPES.COUNTRY\n      ? data\n      : {[currentMap.code]: data[currentMap.code]};\n\n  useEffect(() => {\n    if (regionHighlighted.districtName) {\n      if (\n        currentMap.code !== regionHighlighted.stateCode &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n        )\n      ) {\n        const newMapMeta = MAP_META[regionHighlighted.stateCode];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          code: regionHighlighted.stateCode,\n          view: MAP_VIEWS.DISTRICTS,\n          option:\n            currentMap.option === MAP_OPTIONS.PER_MILLION\n              ? MAP_OPTIONS.TOTAL\n              : currentMap.option,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        code: 'TT',\n        view:\n          currentMap.option === MAP_OPTIONS.ZONES\n            ? MAP_VIEWS.DISTRICTS\n            : MAP_VIEWS.STATES,\n        option: currentMap.option,\n      });\n    }\n  }, [\n    isCountryLoaded,\n    regionHighlighted.stateCode,\n    regionHighlighted.districtName,\n    currentMap.code,\n    currentMap.option,\n    currentMap.view,\n    currentMapMeta.mapType,\n  ]);\n\n  const switchMap = useCallback(\n    (stateCode) => {\n      const newMapMeta = MAP_META[stateCode];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const districts = data[stateCode].districts;\n        const topDistrict = Object.keys(districts).sort(\n          (a, b) =>\n            getStatistic(districts[b], 'total', mapStatistic) -\n            getStatistic(districts[a], 'total', mapStatistic)\n        )[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            stateCode: stateCode,\n            districtName: topDistrict,\n          });\n          setCurrentMap({\n            code: stateCode,\n            view: MAP_VIEWS.DISTRICTS,\n            option:\n              currentMap.option === MAP_OPTIONS.PER_MILLION\n                ? MAP_OPTIONS.TOTAL\n                : currentMap.option,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            code: 'TT',\n            view:\n              currentMap.option === MAP_OPTIONS.ZONES\n                ? MAP_VIEWS.DISTRICTS\n                : MAP_VIEWS.STATES,\n            option: currentMap.option,\n          });\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        });\n      }\n    },\n    [data, currentMap.option, mapStatistic, setRegionHighlighted]\n  );\n\n  const panelState = useMemo(() => {\n    const stateCode =\n      currentMap.view === MAP_VIEWS.STATES\n        ? regionHighlighted.stateCode\n        : currentMap.code;\n    const stateData = data[stateCode] || {};\n    return produce(stateData, (draft) => {\n      draft.state = STATE_NAMES[stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, currentMap.view, currentMap.code]);\n\n  const hoveredRegion = useMemo(() => {\n    const hoveredData =\n      (regionHighlighted.districtName\n        ? data[regionHighlighted.stateCode]?.districts?.[\n            regionHighlighted.districtName\n          ]\n        : data[regionHighlighted.stateCode]) || {};\n    return produce(hoveredData, (draft) => {\n      draft.name =\n        regionHighlighted.districtName ||\n        STATE_NAMES[regionHighlighted.stateCode];\n      if (!regionHighlighted.districtName)\n        draft.population_millions =\n          STATE_POPULATIONS_MIL[regionHighlighted.stateCode];\n    });\n  }, [data, regionHighlighted.stateCode, regionHighlighted.districtName]);\n\n  const handleTabClick = (option) => {\n    switch (option) {\n      case MAP_OPTIONS.TOTAL:\n        setCurrentMap({\n          code: currentMap.code,\n          view:\n            currentMapMeta.mapType === MAP_TYPES.COUNTRY\n              ? MAP_VIEWS.STATES\n              : MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.TOTAL,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: regionHighlighted.stateCode,\n            districtName: null,\n          });\n        return;\n      case MAP_OPTIONS.PER_MILLION:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.STATES,\n          option: MAP_OPTIONS.PER_MILLION,\n        });\n        setRegionHighlighted({\n          stateCode: regionHighlighted.stateCode,\n          districtName: null,\n        });\n        return;\n      case MAP_OPTIONS.HOTSPOTS:\n        if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.HOTSPOTS,\n        });\n        return;\n      case MAP_OPTIONS.ZONES:\n        setCurrentMap({\n          code: currentMap.code,\n          view: MAP_VIEWS.DISTRICTS,\n          option: MAP_OPTIONS.ZONES,\n        });\n        if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n          setRegionHighlighted({\n            stateCode: 'TT',\n            districtName: null,\n          });\n        return;\n      default:\n        return;\n    }\n  };\n\n  const springs = useSprings(\n    MAP_STATISTICS.length,\n    MAP_STATISTICS.map((statistic) => ({\n      total: getStatistic(panelState, 'total', statistic),\n      delta: getStatistic(panelState, 'delta', statistic),\n      from: {\n        total: getStatistic(panelState, 'total', statistic),\n        delta: getStatistic(panelState, 'delta', statistic),\n      },\n      config: {\n        tension: 500,\n        clamp: true,\n      },\n    }))\n  );\n\n  return (\n    <div\n      className={classnames(\n        'MapExplorer',\n        {stickied: anchor === 'mapexplorer'},\n        {hidden: anchor && anchor !== 'mapexplorer'}\n      )}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={classnames('anchor', {stickied: anchor === 'mapexplorer'})}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <PinIcon />\n        </div>\n      )}\n\n      <div className=\"header\">\n        <h1>\n          {currentMap.code === 'TT'\n            ? t('India')\n            : t(STATE_NAMES[currentMap.code])}{' '}\n          {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'state/UT'\n                : 'District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        {MAP_STATISTICS.map((statistic, index) => (\n          <div\n            key={statistic}\n            className={classnames('stats', statistic, {\n              focused: statistic === mapStatistic,\n            })}\n            onClick={() => setMapStatistic(statistic)}\n          >\n            <h5>{t(capitalize(statistic))}</h5>\n            <div className=\"stats-bottom\">\n              <animated.h1>\n                {springs[index].total.interpolate((total) =>\n                  formatNumber(Math.floor(total))\n                )}\n              </animated.h1>\n              {statistic !== 'tested' && statistic !== 'active' && (\n                <animated.h6>\n                  {springs[index].delta.interpolate((delta) =>\n                    delta > 0 ? `+${formatNumber(Math.floor(delta))}` : '\\u00A0'\n                  )}\n                </animated.h6>\n              )}\n              {statistic === 'tested' && (\n                <h6>\n                  {panelState?.total?.tested &&\n                    t('As of {{date}}', {\n                      date: formatDate(\n                        panelState.meta.tested['last_updated'],\n                        'dd MMM'\n                      ),\n                    })}\n                </h6>\n              )}\n            </div>\n            {statistic === 'tested' && panelState?.total?.tested && (\n              <a href={panelState.meta.tested.source} target=\"_noblank\">\n                <Icon.Link />\n              </a>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"meta\">\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div\n            className=\"map-button\"\n            onClick={() => history.push(`state/${currentMap.code}`)}\n          >\n            {t('Visit state page')}\n            <Icon.ArrowRightCircle />\n          </div>\n        )}\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelState?.meta?.['last_updated'] && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {`${formatLastUpdated(panelState.meta['last_updated'])} ${t(\n                  'ago'\n                )}`}\n              </h3>\n            </div>\n          )}\n\n        <h2\n          className={classnames(mapStatistic, {\n            [hoveredRegion?.zone]: currentMap.option === MAP_OPTIONS.ZONES,\n          })}\n        >\n          {t(hoveredRegion.name)}\n          {hoveredRegion.name === UNKNOWN_DISTRICT_KEY &&\n            ` (${t(STATE_NAMES[regionHighlighted.stateCode])})`}\n        </h2>\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE && (\n          <div className=\"map-button\" onClick={() => switchMap('TT')}>\n            {t('Back')}\n          </div>\n        )}\n\n        {currentMap.option !== MAP_OPTIONS.ZONES &&\n          ((currentMap.view === MAP_VIEWS.DISTRICTS &&\n            regionHighlighted.districtName) ||\n            (currentMap.view === MAP_VIEWS.STATES &&\n              currentMap.option !== MAP_OPTIONS.TOTAL)) && (\n            <h1 className={classnames('district', mapStatistic)}>\n              {formatNumber(\n                getStatistic(\n                  hoveredRegion,\n                  'total',\n                  mapStatistic,\n                  currentMap.option === MAP_OPTIONS.PER_MILLION\n                    ? hoveredRegion.population_millions\n                    : 1\n                )\n              )}\n              <br />\n              <span>\n                {t(mapStatistic)}\n                {currentMap.option === MAP_OPTIONS.PER_MILLION &&\n                  ` ${t('per million')}`}\n              </span>\n            </h1>\n          )}\n      </div>\n\n      <div ref={mapExplorerRef}>\n        {mapStatistic && (\n          <Suspense\n            fallback={\n              <MapVisualizerLoader\n                className=\"map-loader\"\n                {...{\n                  width: mapExplorerRef.current?.clientWidth,\n                  statistic: mapStatistic,\n                }}\n              />\n            }\n          >\n            <MapVisualizer\n              currentMap={currentMap}\n              data={currentMapData}\n              changeMap={switchMap}\n              regionHighlighted={regionHighlighted}\n              setRegionHighlighted={setRegionHighlighted}\n              statistic={mapStatistic}\n              isCountryLoaded={isCountryLoaded}\n            />\n          </Suspense>\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        {Object.values(MAP_OPTIONS).map((option) => (\n          <div\n            key={option}\n            className={classnames('tab', {\n              focused: currentMap.option === option,\n            })}\n            onClick={() => handleTabClick(option)}\n          >\n            <h4>\n              {t(option)}\n              {option === MAP_OPTIONS.PER_MILLION && <sup>&dagger;</sup>}\n            </h4>\n          </div>\n        ))}\n      </div>\n\n      <h6 className={classnames('footnote', 'table-fineprint')}>\n        &dagger; {`${t('Based on 2019 population projection by NCP')} (`}\n        <a\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n        )\n      </h6>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  }\n  if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  }\n  if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  }\n  if (\n    !equal(\n      prevProps.data?.TT?.meta?.['last_updated'],\n      currProps.data?.TT?.meta?.['last_updated']\n    )\n  ) {\n    return false;\n  }\n  if (!equal(prevProps.data?.TT?.total, currProps.data?.TT?.total)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapExplorer, isEqual);\n","import {\n  COLORS,\n  D3_TRANSITION_DURATION,\n  TIMESERIES_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useresizeobserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport * as d3 from 'd3';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction TimeSeries({timeseries, dates, chartType, isUniform, isLog}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // Margins\n    const margin = {top: 15, right: 35, bottom: 25, left: 25};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = d3\n      .scaleTime()\n      .clamp(true)\n      .domain([parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])])\n      .range([margin.left, chartRight]);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 4 : 7;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        d3\n          .axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => formatDate(date, 'dd MMM'))\n      );\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(d3.axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n\n    const yAxis = (g, yScale) =>\n      g\n        .attr('class', 'y-axis')\n        .call(d3.axisRight(yScale).ticks(4, '0~s').tickPadding(4));\n\n    const uniformScaleMin = d3.min(dates, (date) =>\n      getStatistic(timeseries[date], chartType, 'active')\n    );\n\n    const uniformScaleMax = d3.max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], chartType, 'confirmed'),\n        getStatistic(timeseries[date], chartType, 'recovered'),\n        getStatistic(timeseries[date], chartType, 'deceased')\n      )\n    );\n\n    const yScaleUniformLinear = d3\n      .scaleLinear()\n      .clamp(true)\n      .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const yScaleUniformLog = d3\n      .scaleLog()\n      .clamp(true)\n      .domain([\n        Math.max(1, uniformScaleMin),\n        Math.max(10, yBufferTop * uniformScaleMax),\n      ])\n      .nice(4)\n      .range([chartBottom, margin.top]);\n\n    const generateYScale = (statistic) => {\n      if (isUniform && chartType === 'total' && isLog && statistic !== 'tested')\n        return yScaleUniformLog;\n\n      if (isUniform && statistic !== 'tested') return yScaleUniformLinear;\n\n      if (chartType === 'total' && isLog)\n        return d3\n          .scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(\n              1,\n              d3.min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n            Math.max(\n              10,\n              yBufferTop *\n                d3.max(dates, (date) =>\n                  getStatistic(timeseries[date], chartType, statistic)\n                )\n            ),\n          ])\n          .nice(4)\n          .range([chartBottom, margin.top]);\n\n      return d3\n        .scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              d3.min(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              d3.max(dates, (date) =>\n                getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n    };\n\n    function mousemove() {\n      const xm = d3.mouse(this)[0];\n      const date = xScale.invert(xm);\n      const bisectDate = d3.bisector((date) => parseIndiaDate(date)).left;\n      const index = bisectDate(dates, date, 1);\n      setHighlightedDate(dates[index]);\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = d3.select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = TIMESERIES_STATISTICS[i];\n      const yScale = generateYScale(statistic);\n      const color = COLORS[statistic];\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n      /* Path dots */\n      svg\n        .selectAll('circle')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('circle')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('r', 2)\n            .attr('cy', chartBottom)\n            .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        )\n        .transition(t)\n        .attr('cx', (date) => xScale(parseIndiaDate(date)))\n        .attr('cy', (date) =>\n          yScale(getStatistic(timeseries[date], chartType, statistic))\n        );\n\n      if (chartType === 'total') {\n        svg\n          .selectAll('.stem')\n          .transition(t)\n          .attr('y1', yScale(0))\n          .attr('y2', yScale(0))\n          .remove();\n\n        const line = d3\n          .line()\n          .curve(d3.curveMonotoneX)\n          .x((date) => xScale(parseIndiaDate(date)))\n          .y((date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n\n        let pathLength;\n        svg\n          .selectAll('.trend')\n          .data(T ? [dates] : [])\n          .join(\n            (enter) =>\n              enter\n                .append('path')\n                .attr('class', 'trend')\n                .attr('fill', 'none')\n                .attr('stroke', color + '50')\n                .attr('stroke-width', 4)\n                .attr('d', line)\n                .attr('stroke-dasharray', function () {\n                  return (pathLength = this.getTotalLength());\n                })\n                .call((enter) =>\n                  enter\n                    .attr('stroke-dashoffset', pathLength)\n                    .transition(t)\n                    .attr('stroke-dashoffset', 0)\n                ),\n            (update) =>\n              update\n                .attr('stroke-dasharray', null)\n                .transition(t)\n                .attrTween('d', function (date) {\n                  const previous = d3.select(this).attr('d');\n                  const current = line(date);\n                  return interpolatePath(previous, current);\n                })\n          );\n      } else {\n        /* DAILY TRENDS */\n        svg.selectAll('.trend').remove();\n\n        svg\n          .selectAll('.stem')\n          .data(dates, (date) => date)\n          .join((enter) =>\n            enter\n              .append('line')\n              .attr('class', 'stem')\n              .style('stroke', color + '99')\n              .style('stroke-width', 4)\n              .attr('x1', (date) => xScale(parseIndiaDate(date)))\n              .attr('y1', chartBottom)\n              .attr('x2', (date) => xScale(parseIndiaDate(date)))\n              .attr('y2', chartBottom)\n          )\n          .transition(t)\n          .attr('x1', (date) => xScale(parseIndiaDate(date)))\n          .attr('y1', yScale(0))\n          .attr('x2', (date) => xScale(parseIndiaDate(date)))\n          .attr('y2', (date) =>\n            yScale(getStatistic(timeseries[date], chartType, statistic))\n          );\n      }\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, isUniform, isLog, timeseries, dates]);\n\n  useEffect(() => {\n    refs.current.forEach((ref) => {\n      const svg = d3.select(ref);\n      svg\n        .selectAll('circle')\n        .attr('r', (date) => (date === highlightedDate ? 4 : 2));\n    });\n  }, [highlightedDate]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const deltaToday = getStatistic(\n        timeseries?.[highlightedDate],\n        'delta',\n        statistic\n      );\n      if (chartType === 'total') return deltaToday;\n      const yesterday = formatISO(subDays(parseIndiaDate(highlightedDate), 1), {\n        representation: 'date',\n      });\n      const deltaYesterday = getStatistic(\n        timeseries?.[yesterday],\n        'delta',\n        statistic\n      );\n      return deltaToday - deltaYesterday;\n    },\n    [timeseries, highlightedDate, chartType]\n  );\n\n  return (\n    <React.Fragment>\n      <div className=\"TimeSeries\">\n        {TIMESERIES_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic);\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent', `is-${statistic}`)}\n              ref={wrapperRef}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">{t(capitalize(statistic))}</h5>\n                  <h5 className=\"title\">\n                    {formatDate(highlightedDate, 'dd MMMM')}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                        getStatistic(\n                          timeseries?.[highlightedDate],\n                          chartType,\n                          statistic\n                        )\n                      )}\n                    </h2>\n                    <h6>{`${delta >= 0 ? '+' : ''}${formatNumber(delta)}`}</h6>\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  }\n  if (!equal(currProps.isUniform, prevProps.isUniform)) {\n    return false;\n  }\n  if (!equal(currProps.isLog, prevProps.isLog)) {\n    return false;\n  }\n  if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  }\n  if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeSeries, isEqual);\n","import TimeSeries from './timeseries';\n\nimport {\n  STATE_NAMES,\n  TIMESERIES_CHART_TYPES,\n  TIMESERIES_OPTIONS,\n} from '../constants';\nimport {getIndiaYesterdayISO, parseIndiaDate} from '../utils/commonfunctions';\n\nimport 'intersection-observer';\n\nimport {PinIcon, IssueOpenedIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport {formatISO, sub} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useMemo, useRef, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useIsVisible} from 'react-is-visible';\nimport {useLocalStorage} from 'react-use';\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  date: timelineDate,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  stateCodes,\n}) {\n  const {t} = useTranslation();\n  const [timeseriesOption, setTimeseriesOption] = useState(\n    TIMESERIES_OPTIONS.MONTH\n  );\n  const [chartType, setChartType] = useLocalStorage('chartType', 'total');\n  const [isUniform, setIsUniform] = useLocalStorage('isUniform', true);\n  const [isLog, setIsLog] = useLocalStorage('isLog', false);\n  const explorerElement = useRef();\n  const isVisible = useIsVisible(explorerElement, {once: true});\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n\n    if (timeseriesOption === TIMESERIES_OPTIONS.TWO_WEEKS) {\n      const cutOffDate = formatISO(sub(parseIndiaDate(today), {weeks: 2}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    } else if (timeseriesOption === TIMESERIES_OPTIONS.MONTH) {\n      const cutOffDate = formatISO(sub(parseIndiaDate(today), {months: 1}), {\n        representation: 'date',\n      });\n      return pastDates.filter((date) => date >= cutOffDate);\n    }\n    return pastDates;\n  }, [timeseries, timelineDate, timeseriesOption]);\n\n  const handleChange = ({target}) => {\n    setRegionHighlighted({\n      stateCode: target.value,\n      districtName: null,\n    });\n  };\n\n  return (\n    <div\n      className={classnames('TimeSeriesExplorer', {\n        stickied: anchor === 'timeseries',\n      })}\n      style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      ref={explorerElement}\n    >\n      <div className=\"timeseries-header\">\n        <div\n          className={classnames('anchor', {\n            stickied: anchor === 'timeseries',\n          })}\n          onClick={() => {\n            setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n          }}\n        >\n          <PinIcon />\n        </div>\n\n        <h1>{t('Spread Trends')}</h1>\n        <div className=\"tabs\">\n          {Object.entries(TIMESERIES_CHART_TYPES).map(([ctype, value]) => (\n            <div\n              className={`tab ${chartType === ctype ? 'focused' : ''}`}\n              key={ctype}\n              onClick={() => {\n                setChartType(ctype);\n              }}\n            >\n              <h4>{t(value)}</h4>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"scale-modes\">\n          <label className=\"main\">{t('Scale Modes')}</label>\n          <div className=\"timeseries-mode\">\n            <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n            <input\n              id=\"timeseries-mode\"\n              type=\"checkbox\"\n              className=\"switch\"\n              checked={isUniform}\n              aria-label={t('Checked by default to scale uniformly.')}\n              onChange={() => {\n                setIsUniform(!isUniform);\n              }}\n            />\n          </div>\n          <div\n            className={`timeseries-logmode ${\n              chartType !== 'total' ? 'disabled' : ''\n            }`}\n          >\n            <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n            <input\n              id=\"timeseries-logmode\"\n              type=\"checkbox\"\n              checked={chartType === 'total' && isLog}\n              className=\"switch\"\n              disabled={chartType !== 'total'}\n              onChange={() => {\n                setIsLog(!isLog);\n              }}\n            />\n          </div>\n        </div>\n\n        {stateCodes && (\n          <div className=\"trends-state-name\">\n            <select value={regionHighlighted.stateCode} onChange={handleChange}>\n              {stateCodes.map((stateCode) => {\n                return (\n                  <option value={stateCode} key={stateCode}>\n                    {stateCode === 'TT'\n                      ? t('All States')\n                      : t(STATE_NAMES[stateCode])}\n                  </option>\n                );\n              })}\n            </select>\n          </div>\n        )}\n      </div>\n\n      {isVisible && (\n        <TimeSeries\n          stateCode={regionHighlighted.stateCode}\n          {...{timeseries, dates, chartType, isUniform, isLog}}\n        />\n      )}\n\n      <div className=\"pills\">\n        {Object.values(TIMESERIES_OPTIONS).map((option) => (\n          <button\n            key={option}\n            type=\"button\"\n            className={classnames({selected: timeseriesOption === option})}\n            onClick={() => setTimeseriesOption(option)}\n          >\n            {t(option)}\n          </button>\n        ))}\n      </div>\n\n      <div className=\"alert\">\n        <IssueOpenedIcon size={24} />\n        <div className=\"alert-right\">\n          {t('Tested chart is independent of uniform scaling')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  }\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(TimeSeriesExplorer, isEqual);\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Compass = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"\n  }));\n});\nCompass.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCompass.displayName = 'Compass';\nexport default Compass;","import {COLORS, D3_TRANSITION_DURATION, NUM_BARS_STATEPAGE} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  getIndiaYesterdayISO,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef} from 'react';\n\nconst getDeltaStatistic = (data, statistic) => {\n  return getStatistic(data, 'delta', statistic);\n};\n\nconst [width, height] = [250, 250];\nconst margin = {top: 50, right: 0, bottom: 50, left: 0};\n\nfunction DeltaBarGraph({timeseries, statistic}) {\n  const svgRef = useRef();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const dates = pastDates.slice(-NUM_BARS_STATEPAGE);\n\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    // const formatTime = d3.timeFormat('%e %b');\n    const xScale = d3\n      .scaleBand()\n      .domain(dates)\n      .range([margin.left, chartRight])\n      .paddingInner(0.33);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        Math.min(\n          0,\n          d3.min(dates, (date) =>\n            getDeltaStatistic(timeseries[date], statistic)\n          )\n        ),\n        Math.max(\n          1,\n          d3.max(dates, (date) =>\n            getDeltaStatistic(timeseries[date], statistic)\n          )\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickSize(0)\n      .tickFormat((date) => formatDate(date, 'dd MMM'));\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (date, i) =>\n        getDeltaStatistic(timeseries[date], statistic) < 0 ? '-1em' : '1.5em'\n      )\n      .style('text-anchor', 'middle')\n      .attr('fill', COLORS[statistic]);\n\n    svg\n      .selectAll('.bar')\n      .data(dates)\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('class', 'bar')\n          .attr('d', (date) =>\n            roundedBar(xScale(date), yScale(0), xScale.bandwidth(), 0, r)\n          )\n      )\n      .transition(t)\n      .attr('d', (date) =>\n        roundedBar(\n          xScale(date),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(getDeltaStatistic(timeseries[date], statistic)),\n          r\n        )\n      )\n      .attr('fill', (date, i) => {\n        return i < date.length - 1\n          ? COLORS[statistic] + '90'\n          : COLORS[statistic];\n      });\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(dates)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date) =>\n        formatNumber(getDeltaStatistic(timeseries[date], statistic))\n      );\n\n    textSelection\n      .transition(t)\n      .attr('fill', COLORS[statistic])\n      .attr('y', (date) => {\n        const val = getDeltaStatistic(timeseries[date], statistic);\n        return yScale(val) + (val < 0 ? 15 : -6);\n      });\n\n    textSelection\n      .append('tspan')\n      .attr(\n        'dy',\n        (date) =>\n          `${getDeltaStatistic(timeseries[date], statistic) < 0 ? 1.2 : -1.2}em`\n      )\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date, i) => {\n        if (i === 0) return '';\n        const prevVal = getDeltaStatistic(timeseries[dates[i - 1]], statistic);\n        if (!prevVal) return '';\n        const delta = getDeltaStatistic(timeseries[date], statistic) - prevVal;\n        return `${delta > 0 ? '+' : ''}${formatNumber(\n          (100 * delta) / Math.abs(prevVal)\n        )}%`;\n      })\n      .transition(t)\n      .attr('fill', COLORS[statistic] + '90');\n  }, [dates, timeseries, statistic]);\n\n  return (\n    <div className=\"DeltaBarGraph\">\n      <svg\n        ref={svgRef}\n        width=\"250\"\n        height=\"250\"\n        viewBox=\"0 0 250 250\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g\n          className=\"x-axis\"\n          transform={`translate(0, ${height - margin.bottom})`}\n        />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.statistic, currProps.statistic)) return false;\n  return true;\n};\n\nexport default React.memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n","import {STATE_NAMES} from '../constants';\n\nimport React, {useState, useRef} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useTransition, animated} from 'react-spring';\nimport {useClickAway} from 'react-use';\n\nconst StateDropdown = ({stateCode}) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const dropdownRef = useRef();\n  const history = useHistory();\n\n  useClickAway(dropdownRef, () => {\n    setShowDropdown(false);\n  });\n\n  const transitions = useTransition(showDropdown, null, {\n    from: {\n      opacity: 0,\n      transform: 'translate3d(0, 2px, 0)',\n      zIndex: 999,\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translate3d(0, 0px, 0)',\n      zIndex: 999,\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translate3d(0, 2px, 0)',\n      zIndex: 999,\n    },\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  return (\n    <div className=\"StateDropdown\">\n      <h1\n        className=\"state-name\"\n        onClick={() => {\n          setShowDropdown((prevData) => !prevData);\n        }}\n      >\n        {STATE_NAMES[stateCode]}\n      </h1>\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div className=\"dropdown\" style={props} ref={dropdownRef}>\n            {Object.keys(STATE_NAMES)\n              .filter((stateCode) => stateCode !== 'UN' && stateCode !== 'TT')\n              .map((stateCode) => (\n                <h1\n                  key={stateCode}\n                  className=\"item\"\n                  onClick={() => {\n                    setShowDropdown(false);\n                    history.push(`/state/${stateCode}`);\n                  }}\n                >\n                  {STATE_NAMES[stateCode]}\n                </h1>\n              ))}\n          </animated.div>\n        ) : (\n          <animated.div style={props}></animated.div>\n        )\n      )}\n\n      {showDropdown && <div className=\"backdrop\"></div>}\n    </div>\n  );\n};\n\nexport default StateDropdown;\n","import Tooltip from './tooltip';\n\nimport React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <Tooltip {...{data: formula}}>\n          <Icon.Info />\n        </Tooltip>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './statemetacard';\n\nimport {\n  STATE_NAMES,\n  STATE_POPULATIONS,\n  STATE_POPULATIONS_MIL,\n} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDate,\n} from '../utils/commonfunctions';\n\nimport {format, sub} from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const confirmed = getStatistic(data[stateCode], 'total', 'confirmed');\n  const active = getStatistic(data[stateCode], 'total', 'active');\n  const deceased = getStatistic(data[stateCode], 'total', 'deceased');\n  const recovered = getStatistic(data[stateCode], 'total', 'recovered');\n  const tested = getStatistic(data[stateCode], 'total', 'tested');\n\n  const totalConfirmed = getStatistic(data['TT'], 'total', 'confirmed');\n\n  const indiaDate = format(getIndiaDate(), 'yyyy-MM-dd');\n  const prevWeekDate = format(sub(getIndiaDate(), {weeks: 1}), 'yyyy-MM-dd');\n\n  const prevWeekConfirmed = getStatistic(\n    timeseries[stateCode]?.[prevWeekDate],\n    'total',\n    'confirmed'\n  );\n\n  const confirmedPerMillion = confirmed / STATE_POPULATIONS_MIL[stateCode];\n  const testPerMillion = tested / STATE_POPULATIONS_MIL[stateCode];\n  const totalConfirmedPerMillion = totalConfirmed / STATE_POPULATIONS_MIL['TT'];\n\n  const recoveryPercent = (recovered / confirmed) * 100;\n  const activePercent = (active / confirmed) * 100;\n  const deathPercent = (deceased / confirmed) * 100;\n\n  const growthRate =\n    ((confirmed - prevWeekConfirmed) / prevWeekConfirmed) * 100;\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population fadeInUp\">\n          <h3>Population</h3>\n          <h1>{formatNumber(STATE_POPULATIONS[stateCode])}</h1>\n        </div>\n        <div className=\"alert\">\n          <Icon.Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={formatNumber(confirmedPerMillion)}\n          total={formatNumber(totalConfirmedPerMillion)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ${formatNumber(\n              Math.round(confirmedPerMillion)\n            )} out of every 1 million people in ${\n            STATE_NAMES[stateCode]\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active'}\n          statistic={`${formatNumber(activePercent)}%`}\n          formula={'(active / confirmed) * 100'}\n          description={\n            activePercent > 0\n              ? `For every 100 confirmed cases, ${formatNumber(\n                  Math.round(activePercent)\n                )} are currently infected.`\n              : 'Currently, there are no active cases in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Rate'}\n          statistic={`${formatNumber(recoveryPercent)}%`}\n          formula={'(recovered / confirmed) * 100'}\n          description={\n            recoveryPercent > 0\n              ? `For every 100 confirmed cases, ${formatNumber(\n                  Math.round(recoveryPercent)\n                )} have recovered from the virus.`\n              : 'Unfortunately, there are no recoveries in this state yet.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Mortality Rate'}\n          statistic={`${formatNumber(deathPercent)}%`}\n          formula={'(deceased / confirmed) * 100'}\n          description={\n            deathPercent > 0\n              ? `For every 100 confirmed cases, ${formatNumber(\n                  Math.round(deathPercent)\n                )} have unfortunately passed away from the virus.`\n              : 'Fortunately, no one has passed away from the virus in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={\n            growthRate > 0\n              ? `${formatNumber(Math.round(growthRate / 7))}%`\n              : '-'\n          }\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            indiaDate,\n            'dd MMM'\n          )}`}\n          description={\n            growthRate > 0\n              ? `In the last one week, the number of new infections has\n              grown by an average of ${formatNumber(\n                Math.round(growthRate / 7)\n              )}%\n              every day.`\n              : 'There has been no growth in the number of infections in last one week.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`≈ ${formatNumber(Math.round(testPerMillion))}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={\n            tested\n              ? `As of ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ago`\n              : ''\n          }\n          description={\n            testPerMillion > 0\n              ? `For every 1 million people in ${STATE_NAMES[stateCode]},\n                ${formatNumber(Math.round(testPerMillion))} people were tested.`\n              : 'No tests have been conducted in this state yet.'\n          }\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StateMeta;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Smile = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 14s1.5 2 4 2 4-2 4-2\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"9\",\n    y1: \"9\",\n    x2: \"9.01\",\n    y2: \"9\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"15\",\n    y1: \"9\",\n    x2: \"15.01\",\n    y2: \"9\"\n  }));\n});\nSmile.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nSmile.displayName = 'Smile';\nexport default Smile;","import DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateDropdown from './statedropdown';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\n\nimport {NUM_BARS_STATEPAGE, STATE_NAMES} from '../constants';\nimport {\n  fetcher,\n  formatDate,\n  formatNumber,\n  getStatistic,\n} from '../utils/commonfunctions';\n\nimport anime from 'animejs';\nimport React, {useState, useMemo} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useParams} from 'react-router-dom';\nimport {useMeasure, useEffectOnce} from 'react-use';\nimport useSWR from 'swr';\n\nfunction State(props) {\n  const {t} = useTranslation();\n\n  const stateCode = useParams().stateCode.toUpperCase();\n\n  const [mapStatistic, setMapStatistic] = useState('confirmed');\n  const [mapSwitcher, {width}] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n\n  useEffectOnce(() => {\n    anime({\n      targets: '.highlight',\n      duration: 200,\n      delay: 500,\n      translateX:\n        mapStatistic === 'confirmed'\n          ? `${width * 0}px`\n          : mapStatistic === 'active'\n          ? `${width * 0.25}px`\n          : mapStatistic === 'recovered'\n          ? `${width * 0.5}px`\n          : mapStatistic === 'deceased'\n          ? `${width * 0.75}px`\n          : '0px',\n      easing: 'spring(1, 80, 90, 10)',\n      opacity: 1,\n    });\n  });\n\n  const {data: timeseries} = useSWR(\n    'https://api.covid19india.org/v3/min/timeseries.min.json',\n    fetcher,\n    {\n      suspense: true,\n      revalidateOnFocus: false,\n    }\n  );\n\n  const {data} = useSWR(\n    'https://api.covid19india.org/v3/min/data.min.json',\n    fetcher,\n    {\n      suspense: true,\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n      revalidateOnFocus: false,\n    }\n  );\n\n  const toggleShowAllDistricts = () => {\n    setShowAllDistricts(!showAllDistricts);\n  };\n\n  const handleSort = (districtNameA, districtNameB) => {\n    const districtA = data[stateCode].districts[districtNameA];\n    const districtB = data[stateCode].districts[districtNameB];\n    return (\n      getStatistic(districtB, 'total', mapStatistic) -\n      getStatistic(districtA, 'total', mapStatistic)\n    );\n  };\n\n  const gridRowCount = useMemo(() => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = data[stateCode]?.districts\n      ? Object.keys(data[stateCode].districts).length\n      : 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  }, [data, stateCode]);\n\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19india.org\n        </title>\n        <meta\n          name=\"title\"\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n        />\n      </Helmet>\n\n      <div className=\"State\">\n        <div className=\"state-left\">\n          <div className=\"header\">\n            <div className=\"header-left\">\n              <StateDropdown {...{stateCode}} />\n              <h5>{`Last Updated on ${formatDate(\n                data[stateCode].meta.last_updated,\n                'dd MMM, p'\n              )} IST`}</h5>\n            </div>\n\n            <div className=\"header-right\">\n              <h5>{t('Tested')}</h5>\n              {data[stateCode]?.total?.tested && (\n                <React.Fragment>\n                  <h2>{formatNumber(data[stateCode].total.tested)}</h2>\n                  <h5 className=\"timestamp\">\n                    {`As of ${formatDate(\n                      data[stateCode].meta.tested.last_updated,\n                      'dd MMMM'\n                    )}`}\n                  </h5>\n                  <h5>\n                    {'per '}\n                    <a\n                      href={data[stateCode].meta.tested.source}\n                      target=\"_noblank\"\n                    >\n                      source\n                    </a>\n                  </h5>\n                </React.Fragment>\n              )}\n            </div>\n          </div>\n\n          <div className=\"map-switcher\" ref={mapSwitcher}>\n            <div\n              className={`highlight ${mapStatistic}`}\n              style={{\n                transform: `translateX(${width * 0}px)`,\n                opacity: 0,\n              }}\n            ></div>\n            <div\n              className=\"clickable\"\n              onClick={() => {\n                setMapStatistic('confirmed');\n                anime({\n                  targets: '.highlight',\n                  translateX: `${width * 0}px`,\n                  easing: 'spring(1, 80, 90, 10)',\n                });\n              }}\n            ></div>\n            <div\n              className=\"clickable\"\n              onClick={() => {\n                setMapStatistic('active');\n                anime({\n                  targets: '.highlight',\n                  translateX: `${width * 0.25}px`,\n                  easing: 'spring(1, 80, 90, 10)',\n                });\n              }}\n            ></div>\n            <div\n              className=\"clickable\"\n              onClick={() => {\n                setMapStatistic('recovered');\n                anime({\n                  targets: '.highlight',\n                  translateX: `${width * 0.5}px`,\n                  easing: 'spring(1, 80, 90, 10)',\n                });\n              }}\n            ></div>\n            <div\n              className=\"clickable\"\n              onClick={() => {\n                setMapStatistic('deceased');\n                anime({\n                  targets: '.highlight',\n                  translateX: `${width * 0.75}px`,\n                  easing: 'spring(1, 80, 90, 10)',\n                });\n              }}\n            ></div>\n          </div>\n\n          <Level data={data[stateCode]} />\n          <Minigraph timeseries={timeseries[stateCode]} />\n\n          <MapExplorer\n            isCountryLoaded={false}\n            {...{\n              stateCode,\n              data,\n              regionHighlighted,\n              setRegionHighlighted,\n              mapStatistic,\n              setMapStatistic,\n            }}\n          />\n\n          <StateMeta\n            {...{\n              stateCode,\n              data,\n              timeseries,\n            }}\n          />\n        </div>\n\n        <div className=\"state-right\">\n          <React.Fragment>\n            <div\n              className=\"district-bar\"\n              style={!showAllDistricts ? {display: 'flex'} : {}}\n            >\n              <div className=\"district-bar-left fadeInUp\">\n                <h2 className={mapStatistic}>Top districts</h2>\n                <div\n                  className={`districts ${showAllDistricts ? 'is-grid' : ''}`}\n                  style={\n                    showAllDistricts\n                      ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\n                      : {}\n                  }\n                >\n                  {Object.keys(data[stateCode]?.districts || {})\n                    .filter((districtName) => districtName !== 'Unknown')\n                    .sort((a, b) => handleSort(a, b))\n                    .slice(0, showAllDistricts ? undefined : 5)\n                    .map((districtName) => {\n                      const total = getStatistic(\n                        data[stateCode].districts[districtName],\n                        'total',\n                        mapStatistic\n                      );\n                      const delta = getStatistic(\n                        data[stateCode].districts[districtName],\n                        'delta',\n                        mapStatistic\n                      );\n                      return (\n                        <div key={districtName} className=\"district\">\n                          <h2>{formatNumber(total)}</h2>\n                          <h5>{t(districtName)}</h5>\n                          {mapStatistic !== 'active' && (\n                            <div className=\"delta\">\n                              <h6 className={mapStatistic}>\n                                {delta > 0\n                                  ? '\\u2191' + formatNumber(delta)\n                                  : ''}\n                              </h6>\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                </div>\n\n                {Object.keys(data[stateCode]?.districts || {}).length > 5 && (\n                  <button className=\"button\" onClick={toggleShowAllDistricts}>\n                    <span>{showAllDistricts ? `View less` : `View all`}</span>\n                  </button>\n                )}\n              </div>\n\n              <div className=\"district-bar-right\">\n                {(mapStatistic === 'confirmed' ||\n                  mapStatistic === 'deceased') && (\n                  <div className=\"happy-sign\">\n                    {Object.keys(timeseries[stateCode] || {})\n                      .slice(-NUM_BARS_STATEPAGE)\n                      .every(\n                        (date) =>\n                          getStatistic(\n                            timeseries[stateCode][date],\n                            'delta',\n                            mapStatistic\n                          ) === 0\n                      ) && (\n                      <div\n                        className={`alert ${\n                          mapStatistic === 'confirmed' ? 'is-green' : ''\n                        }`}\n                      >\n                        <Icon.Smile />\n                        <div className=\"alert-right\">\n                          No new {mapStatistic} cases in the past five days\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n                <DeltaBarGraph\n                  timeseries={timeseries[stateCode]}\n                  statistic={mapStatistic}\n                />\n              </div>\n            </div>\n\n            <TimeSeriesExplorer\n              timeseries={timeseries[stateCode]}\n              {...{regionHighlighted, setRegionHighlighted}}\n            />\n          </React.Fragment>\n        </div>\n      </div>\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}