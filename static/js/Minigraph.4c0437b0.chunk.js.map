{"version":3,"sources":["../node_modules/fast-deep-equal/index.js","../node_modules/d3-interpolate-path/build/d3-interpolate-path.js","components/minigraph.js"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","_extends","assign","target","arguments","apply","this","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","decasteljau","points","t","left","right","decasteljauRecurse","newPoints","reverse","pointsToCommand","command","x2","y2","x1","y1","x","y","type","splitCurve","commandStart","commandEnd","segmentCount","segments","remainingCurve","tIncrement","split","splitCurveAsPoints","map","commandTokenRegex","typeMap","M","L","H","V","C","S","Q","T","A","arrayOfLength","array","commandToString","concat","p","join","extend","commandsToExtend","referenceCommands","excludeSegment","numSegmentsToExtend","numReferenceSegments","segmentRatio","extended","reduce","accum","d","insertIndex","Math","floor","addToPriorSegment","lastCommandCopies","forEach","copyCommand","splitSegment","unshift","makeCommands","commandArgs","tokens","match","commands","toLowerCase","interpolatePath","aCommands","bCommands","abs","interpolatedCommands","aCommand","bCommand","conversionMap","readFromBKeys","toUpperCase","aConverted","bKey","bValue","aValue","undefined","includes","convertToSameType","getOwnPropertyDescriptors","defineProperties","_objectSpread2","addZ","interpolatedCommand","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","arg","round","err","interpolatedString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","factory","React","memo","timeseries","timelineDate","date","refs","useRef","dates","useMemo","today","getIndiaYesterdayISO","pastDates","cutOffDate","formatISO","subDays","parseIndiaDate","MINIGRAPH_LOOKBACK_DAYS","representation","useEffect","margin","chartRight","chartBottom","xScale","d3","clamp","domain","range","dailyMin","getStatistic","dailyMax","max","domainMinMax","yScale","current","ref","index","pathLength","svg","statistic","PRIMARY_STATISTICS","color","COLORS","line","curve","selectAll","data","enter","append","attr","getTotalLength","transition","delay","duration","update","attrTween","previous","style","className","classnames","el","width","height","viewBox","preserveAspectRatio","prevProps","currProps"],"mappings":"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","file":"static/js/Minigraph.4c0437b0.chunk.js","sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, (function (exports) { 'use strict';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * de Casteljau's algorithm for drawing and splitting bezier curves.\n * Inspired by https://pomax.github.io/bezierinfo/\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   The original segment to split.\n * @param {Number} t Where to split the curve (value between [0, 1])\n * @return {Object} An object { left, right } where left is the segment from 0..t and\n *   right is the segment from t..1.\n */\nfunction decasteljau(points, t) {\n  var left = [];\n  var right = [];\n\n  function decasteljauRecurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var newPoints = Array(points.length - 1);\n\n      for (var i = 0; i < newPoints.length; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n\n        if (i === newPoints.length - 1) {\n          right.push(points[i + 1]);\n        }\n\n        newPoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n\n      decasteljauRecurse(newPoints, t);\n    }\n  }\n\n  if (points.length) {\n    decasteljauRecurse(points, t);\n  }\n\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\n/**\n * Convert segments represented as points back into a command object\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   Represents a segment\n * @return {Object} A command object representing the segment.\n */\n\n\nfunction pointsToCommand(points) {\n  var command = {};\n\n  if (points.length === 4) {\n    command.x2 = points[2][0];\n    command.y2 = points[2][1];\n  }\n\n  if (points.length >= 3) {\n    command.x1 = points[1][0];\n    command.y1 = points[1][1];\n  }\n\n  command.x = points[points.length - 1][0];\n  command.y = points[points.length - 1][1];\n\n  if (points.length === 4) {\n    // start, control1, control2, end\n    command.type = 'C';\n  } else if (points.length === 3) {\n    // start, control, end\n    command.type = 'Q';\n  } else {\n    // start, end\n    command.type = 'L';\n  }\n\n  return command;\n}\n/**\n * Runs de Casteljau's algorithm enough times to produce the desired number of segments.\n *\n * @param {Number[][]} points Array of [x,y] points for de Casteljau (the initial segment to split)\n * @param {Number} segmentCount Number of segments to split the original into\n * @return {Number[][][]} Array of segments\n */\n\n\nfunction splitCurveAsPoints(points, segmentCount) {\n  segmentCount = segmentCount || 2;\n  var segments = [];\n  var remainingCurve = points;\n  var tIncrement = 1 / segmentCount; // x-----x-----x-----x\n  // t=  0.33   0.66   1\n  // x-----o-----------x\n  // r=  0.33\n  //       x-----o-----x\n  // r=         0.5  (0.33 / (1 - 0.33))  === tIncrement / (1 - (tIncrement * (i - 1))\n  // x-----x-----x-----x----x\n  // t=  0.25   0.5   0.75  1\n  // x-----o----------------x\n  // r=  0.25\n  //       x-----o----------x\n  // r=         0.33  (0.25 / (1 - 0.25))\n  //             x-----o----x\n  // r=         0.5  (0.25 / (1 - 0.5))\n\n  for (var i = 0; i < segmentCount - 1; i++) {\n    var tRelative = tIncrement / (1 - tIncrement * i);\n    var split = decasteljau(remainingCurve, tRelative);\n    segments.push(split.left);\n    remainingCurve = split.right;\n  } // last segment is just to the end from the last point\n\n\n  segments.push(remainingCurve);\n  return segments;\n}\n/**\n * Convert command objects to arrays of points, run de Casteljau's algorithm on it\n * to split into to the desired number of segments.\n *\n * @param {Object} commandStart The start command object\n * @param {Object} commandEnd The end command object\n * @param {Number} segmentCount The number of segments to create\n * @return {Object[]} An array of commands representing the segments in sequence\n */\n\n\nfunction splitCurve(commandStart, commandEnd, segmentCount) {\n  var points = [[commandStart.x, commandStart.y]];\n\n  if (commandEnd.x1 != null) {\n    points.push([commandEnd.x1, commandEnd.y1]);\n  }\n\n  if (commandEnd.x2 != null) {\n    points.push([commandEnd.x2, commandEnd.y2]);\n  }\n\n  points.push([commandEnd.x, commandEnd.y]);\n  return splitCurveAsPoints(points, segmentCount).map(pointsToCommand);\n}\n\nvar commandTokenRegex = /[MLCSTQAHVmlcstqahv]|-?[\\d.e+-]+/g;\n/**\n * List of params for each command type in a path `d` attribute\n */\n\nvar typeMap = {\n  M: ['x', 'y'],\n  L: ['x', 'y'],\n  H: ['x'],\n  V: ['y'],\n  C: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],\n  S: ['x2', 'y2', 'x', 'y'],\n  Q: ['x1', 'y1', 'x', 'y'],\n  T: ['x', 'y'],\n  A: ['rx', 'ry', 'xAxisRotation', 'largeArcFlag', 'sweepFlag', 'x', 'y']\n}; // Add lower case entries too matching uppercase (e.g. 'm' == 'M')\n\nObject.keys(typeMap).forEach(function (key) {\n  typeMap[key.toLowerCase()] = typeMap[key];\n});\n\nfunction arrayOfLength(length, value) {\n  var array = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n/**\n * Converts a command object to a string to be used in a `d` attribute\n * @param {Object} command A command object\n * @return {String} The string for the `d` attribute\n */\n\n\nfunction commandToString(command) {\n  return \"\".concat(command.type).concat(typeMap[command.type].map(function (p) {\n    return command[p];\n  }).join(','));\n}\n/**\n * Converts command A to have the same type as command B.\n *\n * e.g., L0,5 -> C0,5,0,5,0,5\n *\n * Uses these rules:\n * x1 <- x\n * x2 <- x\n * y1 <- y\n * y2 <- y\n * rx <- 0\n * ry <- 0\n * xAxisRotation <- read from B\n * largeArcFlag <- read from B\n * sweepflag <- read from B\n *\n * @param {Object} aCommand Command object from path `d` attribute\n * @param {Object} bCommand Command object from path `d` attribute to match against\n * @return {Object} aCommand converted to type of bCommand\n */\n\n\nfunction convertToSameType(aCommand, bCommand) {\n  var conversionMap = {\n    x1: 'x',\n    y1: 'y',\n    x2: 'x',\n    y2: 'y'\n  };\n  var readFromBKeys = ['xAxisRotation', 'largeArcFlag', 'sweepFlag']; // convert (but ignore M types)\n\n  if (aCommand.type !== bCommand.type && bCommand.type.toUpperCase() !== 'M') {\n    var aConverted = {};\n    Object.keys(bCommand).forEach(function (bKey) {\n      var bValue = bCommand[bKey]; // first read from the A command\n\n      var aValue = aCommand[bKey]; // if it is one of these values, read from B no matter what\n\n      if (aValue === undefined) {\n        if (readFromBKeys.includes(bKey)) {\n          aValue = bValue;\n        } else {\n          // if it wasn't in the A command, see if an equivalent was\n          if (aValue === undefined && conversionMap[bKey]) {\n            aValue = aCommand[conversionMap[bKey]];\n          } // if it doesn't have a converted value, use 0\n\n\n          if (aValue === undefined) {\n            aValue = 0;\n          }\n        }\n      }\n\n      aConverted[bKey] = aValue;\n    }); // update the type to match B\n\n    aConverted.type = bCommand.type;\n    aCommand = aConverted;\n  }\n\n  return aCommand;\n}\n/**\n * Interpolate between command objects commandStart and commandEnd segmentCount times.\n * If the types are L, Q, or C then the curves are split as per de Casteljau's algorithm.\n * Otherwise we just copy commandStart segmentCount - 1 times, finally ending with commandEnd.\n *\n * @param {Object} commandStart Command object at the beginning of the segment\n * @param {Object} commandEnd Command object at the end of the segment\n * @param {Number} segmentCount The number of segments to split this into. If only 1\n *   Then [commandEnd] is returned.\n * @return {Object[]} Array of ~segmentCount command objects between commandStart and\n *   commandEnd. (Can be segmentCount+1 objects if commandStart is type M).\n */\n\n\nfunction splitSegment(commandStart, commandEnd, segmentCount) {\n  var segments = []; // line, quadratic bezier, or cubic bezier\n\n  if (commandEnd.type === 'L' || commandEnd.type === 'Q' || commandEnd.type === 'C') {\n    segments = segments.concat(splitCurve(commandStart, commandEnd, segmentCount)); // general case - just copy the same point\n  } else {\n    var copyCommand = _extends({}, commandStart); // convert M to L\n\n\n    if (copyCommand.type === 'M') {\n      copyCommand.type = 'L';\n    }\n\n    segments = segments.concat(arrayOfLength(segmentCount - 1).map(function () {\n      return copyCommand;\n    }));\n    segments.push(commandEnd);\n  }\n\n  return segments;\n}\n/**\n * Extends an array of commandsToExtend to the length of the referenceCommands by\n * splitting segments until the number of commands match. Ensures all the actual\n * points of commandsToExtend are in the extended array.\n *\n * @param {Object[]} commandsToExtend The command object array to extend\n * @param {Object[]} referenceCommands The command object array to match in length\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @return {Object[]} The extended commandsToExtend array\n */\n\n\nfunction extend(commandsToExtend, referenceCommands, excludeSegment) {\n  // compute insertion points:\n  // number of segments in the path to extend\n  var numSegmentsToExtend = commandsToExtend.length - 1; // number of segments in the reference path.\n\n  var numReferenceSegments = referenceCommands.length - 1; // this value is always between [0, 1].\n\n  var segmentRatio = numSegmentsToExtend / numReferenceSegments; // create a map, mapping segments in referenceCommands to how many points\n  // should be added in that segment (should always be >= 1 since we need each\n  // point itself).\n  // 0 = segment 0-1, 1 = segment 1-2, n-1 = last vertex\n\n  var countPointsPerSegment = arrayOfLength(numReferenceSegments).reduce(function (accum, d, i) {\n    var insertIndex = Math.floor(segmentRatio * i); // handle excluding segments\n\n    if (excludeSegment && insertIndex < commandsToExtend.length - 1 && excludeSegment(commandsToExtend[insertIndex], commandsToExtend[insertIndex + 1])) {\n      // set the insertIndex to the segment that this point should be added to:\n      // round the insertIndex essentially so we split half and half on\n      // neighbouring segments. hence the segmentRatio * i < 0.5\n      var addToPriorSegment = segmentRatio * i % 1 < 0.5; // only skip segment if we already have 1 point in it (can't entirely remove a segment)\n\n      if (accum[insertIndex]) {\n        // TODO - Note this is a naive algorithm that should work for most d3-area use cases\n        // but if two adjacent segments are supposed to be skipped, this will not perform as\n        // expected. Could be updated to search for nearest segment to place the point in, but\n        // will only do that if necessary.\n        // add to the prior segment\n        if (addToPriorSegment) {\n          if (insertIndex > 0) {\n            insertIndex -= 1; // not possible to add to previous so adding to next\n          } else if (insertIndex < commandsToExtend.length - 1) {\n            insertIndex += 1;\n          } // add to next segment\n\n        } else if (insertIndex < commandsToExtend.length - 1) {\n          insertIndex += 1; // not possible to add to next so adding to previous\n        } else if (insertIndex > 0) {\n          insertIndex -= 1;\n        }\n      }\n    }\n\n    accum[insertIndex] = (accum[insertIndex] || 0) + 1;\n    return accum;\n  }, []); // extend each segment to have the correct number of points for a smooth interpolation\n\n  var extended = countPointsPerSegment.reduce(function (extended, segmentCount, i) {\n    // if last command, just add `segmentCount` number of times\n    if (i === commandsToExtend.length - 1) {\n      var lastCommandCopies = arrayOfLength(segmentCount, _extends({}, commandsToExtend[commandsToExtend.length - 1])); // convert M to L\n\n      if (lastCommandCopies[0].type === 'M') {\n        lastCommandCopies.forEach(function (d) {\n          d.type = 'L';\n        });\n      }\n\n      return extended.concat(lastCommandCopies);\n    } // otherwise, split the segment segmentCount times.\n\n\n    return extended.concat(splitSegment(commandsToExtend[i], commandsToExtend[i + 1], segmentCount));\n  }, []); // add in the very first point since splitSegment only adds in the ones after it\n\n  extended.unshift(commandsToExtend[0]);\n  return extended;\n}\n/**\n * Takes a path `d` string and converts it into an array of command\n * objects. Drops the `Z` character.\n *\n * @param {String|null} d A path `d` string\n */\n\n\nfunction makeCommands(d) {\n  // split into valid tokens\n  var tokens = (d || '').match(commandTokenRegex) || [];\n  var commands = [];\n  var commandArgs;\n  var command; // iterate over each token, checking if we are at a new command\n  // by presence in the typeMap\n\n  for (var i = 0; i < tokens.length; ++i) {\n    commandArgs = typeMap[tokens[i]]; // new command found:\n\n    if (commandArgs) {\n      command = {\n        type: tokens[i]\n      }; // add each of the expected args for this command:\n\n      for (var a = 0; a < commandArgs.length; ++a) {\n        command[commandArgs[a]] = +tokens[i + a + 1];\n      } // need to increment our token index appropriately since\n      // we consumed token args\n\n\n      i += commandArgs.length;\n      commands.push(command);\n    }\n  }\n\n  return commands;\n}\n/**\n * Interpolate from A to B by extending A and B during interpolation to have\n * the same number of points. This allows for a smooth transition when they\n * have a different number of points.\n *\n * Ignores the `Z` character in paths unless both A and B end with it.\n *\n * @param {String} a The `d` attribute for a path\n * @param {String} b The `d` attribute for a path\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @returns {Function} Interpolation function that maps t ([0, 1]) to a path `d` string.\n */\n\n\nfunction interpolatePath(a, b, excludeSegment) {\n  var aCommands = makeCommands(a);\n  var bCommands = makeCommands(b);\n\n  if (!aCommands.length && !bCommands.length) {\n    return function nullInterpolator() {\n      return '';\n    };\n  } // if A is empty, treat it as if it used to contain just the first point\n  // of B. This makes it so the line extends out of from that first point.\n\n\n  if (!aCommands.length) {\n    aCommands.push(bCommands[0]); // otherwise if B is empty, treat it as if it contains the first point\n    // of A. This makes it so the line retracts into the first point.\n  } else if (!bCommands.length) {\n    bCommands.push(aCommands[0]);\n  } // extend to match equal size\n\n\n  var numPointsToExtend = Math.abs(bCommands.length - aCommands.length);\n\n  if (numPointsToExtend !== 0) {\n    // B has more points than A, so add points to A before interpolating\n    if (bCommands.length > aCommands.length) {\n      aCommands = extend(aCommands, bCommands, excludeSegment); // else if A has more points than B, add more points to B\n    } else if (bCommands.length < aCommands.length) {\n      bCommands = extend(bCommands, aCommands, excludeSegment);\n    }\n  } // commands have same length now.\n  // convert commands in A to the same type as those in B\n\n\n  aCommands = aCommands.map(function (aCommand, i) {\n    return convertToSameType(aCommand, bCommands[i]);\n  }); // create mutable interpolated command objects\n\n  var interpolatedCommands = aCommands.map(function (aCommand) {\n    return _objectSpread2({}, aCommand);\n  });\n  var addZ = (a == null || a[a.length - 1] === 'Z') && (b == null || b[b.length - 1] === 'Z');\n  return function pathInterpolator(t) {\n    // at 1 return the final value without the extensions used during interpolation\n    if (t === 1) {\n      return b == null ? '' : b;\n    } // interpolate the commands using the mutable interpolated command objs\n    // we can skip at t=0 since we copied aCommands to begin\n\n\n    if (t > 0) {\n      for (var i = 0; i < interpolatedCommands.length; ++i) {\n        var aCommand = aCommands[i];\n        var bCommand = bCommands[i];\n        var interpolatedCommand = interpolatedCommands[i];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = typeMap[interpolatedCommand.type][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var arg = _step.value;\n            interpolatedCommand[arg] = (1 - t) * aCommand[arg] + t * bCommand[arg]; // do not use floats for flags (#27), round to integer\n\n            if (arg === 'largeArcFlag' || arg === 'sweepFlag') {\n              interpolatedCommand[arg] = Math.round(interpolatedCommand[arg]);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    } // convert to a string (fastest concat: https://jsperf.com/join-concat/150)\n\n\n    var interpolatedString = '';\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = interpolatedCommands[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _interpolatedCommand = _step2.value;\n        interpolatedString += commandToString(_interpolatedCommand);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    if (addZ) {\n      interpolatedString += 'Z';\n    }\n\n    return interpolatedString;\n  };\n}\n\nexports.interpolatePath = interpolatePath;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","import {\n  COLORS,\n  MINIGRAPH_LOOKBACK_DAYS,\n  PRIMARY_STATISTICS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonfunctions';\n\nimport classnames from 'classnames';\nimport * as d3 from 'd3';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useMemo} from 'react';\n\nfunction Minigraph({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n    const cutOffDate = formatISO(\n      subDays(parseIndiaDate(today), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDate);\n  }, [timeseries, timelineDate]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const margin = {top: 10, right: 5, bottom: 20, left: 5};\n    const chartRight = 100 - margin.right;\n    const chartBottom = 100 - margin.bottom;\n\n    const xScale = d3\n      .scaleTime()\n      .clamp(true)\n      .domain([parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])])\n      .range([margin.left, chartRight]);\n\n    const dailyMin = d3.min(dates, (date) =>\n      getStatistic(timeseries[date], 'delta', 'active')\n    );\n\n    const dailyMax = d3.max(dates, (date) =>\n      Math.max(\n        getStatistic(timeseries[date], 'delta', 'confirmed'),\n        getStatistic(timeseries[date], 'delta', 'recovered'),\n        getStatistic(timeseries[date], 'delta', 'deceased')\n      )\n    );\n\n    const domainMinMax = Math.max(-dailyMin, dailyMax);\n\n    const yScale = d3\n      .scaleLinear()\n      .clamp(true)\n      .domain([-domainMinMax, domainMinMax])\n      .range([chartBottom, margin.top]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = d3.select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = COLORS[statistic];\n\n      const line = d3\n        .line()\n        .curve(d3.curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) =>\n          yScale(getStatistic(timeseries[date], 'delta', statistic))\n        );\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', line)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = d3.select(this).attr('d');\n                const current = line(date);\n                return interpolatePath(previous, current);\n              })\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getStatistic(timeseries[date], 'delta', statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n        );\n    });\n  }, [dates, timeseries]);\n\n  return (\n    <div className=\"Minigraph\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div key={statistic} className={classnames('svg-parent')}>\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            width=\"100\"\n            height=\"75\"\n            viewBox=\"0 0 100 75\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Minigraph, isEqual);\n"],"sourceRoot":""}